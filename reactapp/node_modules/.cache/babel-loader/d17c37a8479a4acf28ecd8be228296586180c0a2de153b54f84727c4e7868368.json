{"ast":null,"code":"var _jsxFileName = \"/Users/armeshpereira/Documents/LastAttempt/reactapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BLEConnection from './components/BLEConnection';\nimport DeepgramTranscriber from './components/DeepgramTranscriber';\nimport AudioRecorder from './components/AudioRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 1rem;\n`;\n_c = AppContainer;\nconst Header = styled.header`\n  text-align: center;\n  padding: 2rem 0;\n  color: white;\n`;\n_c2 = Header;\nconst Title = styled.h1`\n  font-size: 2.5rem;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n`;\n_c3 = Title;\nconst Subtitle = styled.p`\n  font-size: 1.2rem;\n  opacity: 0.9;\n  margin: 0;\n`;\n_c4 = Subtitle;\nconst ComponentsContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c5 = ComponentsContainer;\nfunction App() {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [audioData, setAudioData] = useState(null);\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [audioMetrics, setAudioMetrics] = useState({\n    sampleCount: 0,\n    bufferSize: 0,\n    bytesPerSample: 0,\n    packetCount: 0\n  });\n  const handleConnectionChange = useCallback(connected => {\n    console.log(`ðŸ”— Connection status changed: ${connected}`);\n    setIsConnected(connected);\n    if (!connected) {\n      setConnectedDevice(null);\n      setAudioData(null);\n    }\n  }, []);\n  const handleAudioData = useCallback((data, audioStream) => {\n    // Store the continuous audio stream data\n    setAudioData(data);\n\n    // Update audio metrics\n    setAudioMetrics(prev => ({\n      sampleCount: data.length,\n      bufferSize: (audioStream === null || audioStream === void 0 ? void 0 : audioStream.bufferSize) || 0,\n      bytesPerSample: (audioStream === null || audioStream === void 0 ? void 0 : audioStream.bytesPerSample) || 0,\n      packetCount: prev.packetCount + 1\n    }));\n\n    // Store device info from audio stream\n    if (audioStream && audioStream.device) {\n      setConnectedDevice(audioStream.device);\n    }\n\n    // Pass to audio recorder if handler exists\n    if (window.audioRecorderHandler) {\n      window.audioRecorderHandler(data, audioStream);\n    }\n  }, []);\n  const handleRecordingComplete = useCallback(audioArray => {\n    console.log(`ðŸŽµ Recording completed: ${audioArray.length} samples`);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"\\uD83C\\uDFA4 XIAO Audio Transcriber\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n        children: \"Real-time BLE Audio Streaming & Deepgram Transcription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComponentsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(BLEConnection, {\n        onConnectionChange: handleConnectionChange,\n        onAudioData: handleAudioData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeepgramTranscriber, {\n        isConnected: isConnected,\n        audioData: audioData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioRecorder, {\n        isConnected: isConnected,\n        onRecordingComplete: handleRecordingComplete,\n        device: connectedDevice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J4y4Qq1EhVD/gOc2V2OLX+udr6s=\");\n_c6 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Title\");\n$RefreshReg$(_c4, \"Subtitle\");\n$RefreshReg$(_c5, \"ComponentsContainer\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"names":["React","useState","useCallback","styled","BLEConnection","DeepgramTranscriber","AudioRecorder","jsxDEV","_jsxDEV","AppContainer","div","_c","Header","header","_c2","Title","h1","_c3","Subtitle","p","_c4","ComponentsContainer","_c5","App","_s","isConnected","setIsConnected","audioData","setAudioData","connectedDevice","setConnectedDevice","audioMetrics","setAudioMetrics","sampleCount","bufferSize","bytesPerSample","packetCount","handleConnectionChange","connected","console","log","handleAudioData","data","audioStream","prev","length","device","window","audioRecorderHandler","handleRecordingComplete","audioArray","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnectionChange","onAudioData","onRecordingComplete","_c6","$RefreshReg$"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BLEConnection from './components/BLEConnection';\nimport DeepgramTranscriber from './components/DeepgramTranscriber';\nimport AudioRecorder from './components/AudioRecorder';\n\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 1rem;\n`;\n\nconst Header = styled.header`\n  text-align: center;\n  padding: 2rem 0;\n  color: white;\n`;\n\nconst Title = styled.h1`\n  font-size: 2.5rem;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n`;\n\nconst Subtitle = styled.p`\n  font-size: 1.2rem;\n  opacity: 0.9;\n  margin: 0;\n`;\n\nconst ComponentsContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [audioData, setAudioData] = useState(null);\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [audioMetrics, setAudioMetrics] = useState({\n    sampleCount: 0,\n    bufferSize: 0,\n    bytesPerSample: 0,\n    packetCount: 0\n  });\n\n  const handleConnectionChange = useCallback((connected) => {\n    console.log(`ðŸ”— Connection status changed: ${connected}`);\n    setIsConnected(connected);\n    \n    if (!connected) {\n      setConnectedDevice(null);\n      setAudioData(null);\n    }\n  }, []);\n\n  const handleAudioData = useCallback((data, audioStream) => {\n    // Store the continuous audio stream data\n    setAudioData(data);\n    \n    // Update audio metrics\n    setAudioMetrics(prev => ({\n      sampleCount: data.length,\n      bufferSize: audioStream?.bufferSize || 0,\n      bytesPerSample: audioStream?.bytesPerSample || 0,\n      packetCount: prev.packetCount + 1\n    }));\n    \n    // Store device info from audio stream\n    if (audioStream && audioStream.device) {\n      setConnectedDevice(audioStream.device);\n    }\n    \n    // Pass to audio recorder if handler exists\n    if (window.audioRecorderHandler) {\n      window.audioRecorderHandler(data, audioStream);\n    }\n  }, []);\n\n  const handleRecordingComplete = useCallback((audioArray) => {\n    console.log(`ðŸŽµ Recording completed: ${audioArray.length} samples`);\n  }, []);\n\n  return (\n    <AppContainer>\n      <Header>\n        <Title>ðŸŽ¤ XIAO Audio Transcriber</Title>\n        <Subtitle>Real-time BLE Audio Streaming & Deepgram Transcription</Subtitle>\n      </Header>\n      \n      <ComponentsContainer>\n        <BLEConnection \n          onConnectionChange={handleConnectionChange}\n          onAudioData={handleAudioData}\n        />\n        \n        <DeepgramTranscriber \n          isConnected={isConnected}\n          audioData={audioData}\n        />\n        \n        <AudioRecorder \n          isConnected={isConnected}\n          onRecordingComplete={handleRecordingComplete}\n          device={connectedDevice}\n        />\n      </ComponentsContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}