{"ast":null,"code":"/**\n * Deepgram Service\n * Handles real-time audio transcription using Deepgram Nova-3 API\n */\n\nimport { createClient, LiveTranscriptionEvents } from '@deepgram/sdk';\nexport class DeepgramService {\n  constructor() {\n    this.apiKey = '6f8cc0568676f91acc28784457aea240539e9aab';\n    this.connection = null;\n    this.isConnected = false;\n    this.isTranscribing = false;\n    this.listeners = {\n      onTranscript: null,\n      onError: null,\n      onOpen: null,\n      onClose: null\n    };\n  }\n\n  /**\n   * Initialize Deepgram connection\n   * @returns {Promise<boolean>} - Success status\n   */\n  async initialize() {\n    try {\n      if (!this.apiKey) {\n        throw new Error('Deepgram API key not configured');\n      }\n      console.log('üîß Initializing Deepgram Nova-3...');\n      const deepgram = createClient(this.apiKey);\n      this.connection = deepgram.listen.live({\n        model: 'nova-3-general',\n        language: 'en-US',\n        smart_format: true,\n        interim_results: true,\n        endpointing: 300,\n        utterance_end_ms: 1000,\n        vad_events: true,\n        encoding: 'linear16',\n        sample_rate: 16000,\n        channels: 1\n      });\n\n      // Set up event listeners\n      this.setupEventListeners();\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Deepgram:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Set up Deepgram event listeners\n   */\n  setupEventListeners() {\n    if (!this.connection) return;\n    this.connection.on(LiveTranscriptionEvents.Open, () => {\n      console.log('‚úÖ Deepgram connection opened');\n      this.isConnected = true;\n      this.isTranscribing = true;\n      if (this.listeners.onOpen) {\n        this.listeners.onOpen();\n      }\n    });\n    this.connection.on(LiveTranscriptionEvents.Transcript, data => {\n      try {\n        var _data$channel, _data$channel$alterna, _data$channel$alterna2;\n        const transcript = (_data$channel = data.channel) === null || _data$channel === void 0 ? void 0 : (_data$channel$alterna = _data$channel.alternatives) === null || _data$channel$alterna === void 0 ? void 0 : (_data$channel$alterna2 = _data$channel$alterna[0]) === null || _data$channel$alterna2 === void 0 ? void 0 : _data$channel$alterna2.transcript;\n        if (transcript && transcript.trim()) {\n          console.log(`üéØ Transcript: \"${transcript}\" (final: ${data.is_final})`);\n          if (this.listeners.onTranscript) {\n            var _data$channel2, _data$channel2$altern, _data$channel2$altern2;\n            this.listeners.onTranscript({\n              text: transcript,\n              isFinal: data.is_final,\n              confidence: ((_data$channel2 = data.channel) === null || _data$channel2 === void 0 ? void 0 : (_data$channel2$altern = _data$channel2.alternatives) === null || _data$channel2$altern === void 0 ? void 0 : (_data$channel2$altern2 = _data$channel2$altern[0]) === null || _data$channel2$altern2 === void 0 ? void 0 : _data$channel2$altern2.confidence) || 0\n            });\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Error processing transcript:', error);\n      }\n    });\n    this.connection.on(LiveTranscriptionEvents.Error, error => {\n      console.error('‚ùå Deepgram error:', error);\n      this.handleError(error);\n    });\n    this.connection.on(LiveTranscriptionEvents.Close, () => {\n      console.log('üîå Deepgram connection closed');\n      this.isConnected = false;\n      this.isTranscribing = false;\n      if (this.listeners.onClose) {\n        this.listeners.onClose();\n      }\n    });\n  }\n\n  /**\n   * Send audio data to Deepgram\n   * @param {Uint8Array} audioData - Audio data to transcribe\n   */\n  sendAudioData(audioData) {\n    if (!this.connection || !this.isConnected) {\n      console.warn('‚ö†Ô∏è Deepgram not connected, cannot send audio data');\n      return false;\n    }\n    try {\n      this.connection.send(audioData);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error sending audio to Deepgram:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Start transcription\n   * @returns {Promise<boolean>} - Success status\n   */\n  async startTranscription() {\n    try {\n      const success = await this.initialize();\n      if (success) {\n        console.log('üéØ Deepgram transcription started');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('‚ùå Failed to start transcription:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Stop transcription\n   */\n  stopTranscription() {\n    try {\n      if (this.connection) {\n        this.connection.finish();\n        this.connection = null;\n      }\n      this.isConnected = false;\n      this.isTranscribing = false;\n      console.log('üõë Deepgram transcription stopped');\n    } catch (error) {\n      console.error('‚ùå Error stopping transcription:', error);\n    }\n  }\n\n  /**\n   * Set event listeners\n   * @param {Object} listeners - Event listener functions\n   */\n  setListeners(listeners) {\n    this.listeners = {\n      ...this.listeners,\n      ...listeners\n    };\n  }\n\n  /**\n   * Handle errors\n   * @param {Error} error - Error to handle\n   */\n  handleError(error) {\n    this.isConnected = false;\n    this.isTranscribing = false;\n    if (this.listeners.onError) {\n      this.listeners.onError(error);\n    }\n  }\n\n  /**\n   * Get connection status\n   * @returns {Object} - Connection status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      isTranscribing: this.isTranscribing,\n      hasConnection: !!this.connection\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    this.stopTranscription();\n    this.listeners = {\n      onTranscript: null,\n      onError: null,\n      onOpen: null,\n      onClose: null\n    };\n  }\n}\n\n// Export singleton instance\nexport const deepgramService = new DeepgramService();","map":{"version":3,"names":["createClient","LiveTranscriptionEvents","DeepgramService","constructor","apiKey","connection","isConnected","isTranscribing","listeners","onTranscript","onError","onOpen","onClose","initialize","Error","console","log","deepgram","listen","live","model","language","smart_format","interim_results","endpointing","utterance_end_ms","vad_events","encoding","sample_rate","channels","setupEventListeners","error","handleError","on","Open","Transcript","data","_data$channel","_data$channel$alterna","_data$channel$alterna2","transcript","channel","alternatives","trim","is_final","_data$channel2","_data$channel2$altern","_data$channel2$altern2","text","isFinal","confidence","Close","sendAudioData","audioData","warn","send","startTranscription","success","stopTranscription","finish","setListeners","getStatus","hasConnection","cleanup","deepgramService"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/src/services/DeepgramService.js"],"sourcesContent":["/**\n * Deepgram Service\n * Handles real-time audio transcription using Deepgram Nova-3 API\n */\n\nimport { createClient, LiveTranscriptionEvents } from '@deepgram/sdk';\n\nexport class DeepgramService {\n  constructor() {\n    this.apiKey = '6f8cc0568676f91acc28784457aea240539e9aab';\n    this.connection = null;\n    this.isConnected = false;\n    this.isTranscribing = false;\n    this.listeners = {\n      onTranscript: null,\n      onError: null,\n      onOpen: null,\n      onClose: null\n    };\n  }\n\n  /**\n   * Initialize Deepgram connection\n   * @returns {Promise<boolean>} - Success status\n   */\n  async initialize() {\n    try {\n      if (!this.apiKey) {\n        throw new Error('Deepgram API key not configured');\n      }\n\n      console.log('üîß Initializing Deepgram Nova-3...');\n      \n      const deepgram = createClient(this.apiKey);\n      \n      this.connection = deepgram.listen.live({\n        model: 'nova-3-general',\n        language: 'en-US',\n        smart_format: true,\n        interim_results: true,\n        endpointing: 300,\n        utterance_end_ms: 1000,\n        vad_events: true,\n        encoding: 'linear16',\n        sample_rate: 16000,\n        channels: 1,\n      });\n\n      // Set up event listeners\n      this.setupEventListeners();\n      \n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Deepgram:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Set up Deepgram event listeners\n   */\n  setupEventListeners() {\n    if (!this.connection) return;\n\n    this.connection.on(LiveTranscriptionEvents.Open, () => {\n      console.log('‚úÖ Deepgram connection opened');\n      this.isConnected = true;\n      this.isTranscribing = true;\n      \n      if (this.listeners.onOpen) {\n        this.listeners.onOpen();\n      }\n    });\n\n    this.connection.on(LiveTranscriptionEvents.Transcript, (data) => {\n      try {\n        const transcript = data.channel?.alternatives?.[0]?.transcript;\n        \n        if (transcript && transcript.trim()) {\n          console.log(`üéØ Transcript: \"${transcript}\" (final: ${data.is_final})`);\n          \n          if (this.listeners.onTranscript) {\n            this.listeners.onTranscript({\n              text: transcript,\n              isFinal: data.is_final,\n              confidence: data.channel?.alternatives?.[0]?.confidence || 0\n            });\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Error processing transcript:', error);\n      }\n    });\n\n    this.connection.on(LiveTranscriptionEvents.Error, (error) => {\n      console.error('‚ùå Deepgram error:', error);\n      this.handleError(error);\n    });\n\n    this.connection.on(LiveTranscriptionEvents.Close, () => {\n      console.log('üîå Deepgram connection closed');\n      this.isConnected = false;\n      this.isTranscribing = false;\n      \n      if (this.listeners.onClose) {\n        this.listeners.onClose();\n      }\n    });\n  }\n\n  /**\n   * Send audio data to Deepgram\n   * @param {Uint8Array} audioData - Audio data to transcribe\n   */\n  sendAudioData(audioData) {\n    if (!this.connection || !this.isConnected) {\n      console.warn('‚ö†Ô∏è Deepgram not connected, cannot send audio data');\n      return false;\n    }\n\n    try {\n      this.connection.send(audioData);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error sending audio to Deepgram:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Start transcription\n   * @returns {Promise<boolean>} - Success status\n   */\n  async startTranscription() {\n    try {\n      const success = await this.initialize();\n      if (success) {\n        console.log('üéØ Deepgram transcription started');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('‚ùå Failed to start transcription:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Stop transcription\n   */\n  stopTranscription() {\n    try {\n      if (this.connection) {\n        this.connection.finish();\n        this.connection = null;\n      }\n      \n      this.isConnected = false;\n      this.isTranscribing = false;\n      \n      console.log('üõë Deepgram transcription stopped');\n    } catch (error) {\n      console.error('‚ùå Error stopping transcription:', error);\n    }\n  }\n\n  /**\n   * Set event listeners\n   * @param {Object} listeners - Event listener functions\n   */\n  setListeners(listeners) {\n    this.listeners = { ...this.listeners, ...listeners };\n  }\n\n  /**\n   * Handle errors\n   * @param {Error} error - Error to handle\n   */\n  handleError(error) {\n    this.isConnected = false;\n    this.isTranscribing = false;\n    \n    if (this.listeners.onError) {\n      this.listeners.onError(error);\n    }\n  }\n\n  /**\n   * Get connection status\n   * @returns {Object} - Connection status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      isTranscribing: this.isTranscribing,\n      hasConnection: !!this.connection\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    this.stopTranscription();\n    this.listeners = {\n      onTranscript: null,\n      onError: null,\n      onOpen: null,\n      onClose: null\n    };\n  }\n}\n\n// Export singleton instance\nexport const deepgramService = new DeepgramService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}