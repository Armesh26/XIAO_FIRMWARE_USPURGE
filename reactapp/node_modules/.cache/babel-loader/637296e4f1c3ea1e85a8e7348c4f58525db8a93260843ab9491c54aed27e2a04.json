{"ast":null,"code":"/**\n * Audio Processor Utility\n * Handles audio data conversion and processing for XIAO nRF52840 Sense\n */\n\nexport class AudioProcessor {\n  constructor() {\n    this.sampleRate = 16000; // Default sample rate from XIAO board\n    this.bufferSize = 8192; // Ring buffer size\n    this.buffer = new Int16Array(this.bufferSize);\n    this.writeIndex = 0;\n    this.readIndex = 0;\n    this.dataCount = 0;\n  }\n\n  /**\n   * Process incoming audio data from BLE\n   * @param {Int16Array} audioData - Raw audio data from XIAO board\n   * @returns {Int16Array|null} - Processed audio chunk or null if not ready\n   */\n  processAudioData(audioData) {\n    if (!audioData || audioData.length === 0) {\n      return null;\n    }\n\n    // Add data to ring buffer\n    for (let i = 0; i < audioData.length; i++) {\n      this.buffer[this.writeIndex] = audioData[i];\n      this.writeIndex = (this.writeIndex + 1) % this.bufferSize;\n      if (this.dataCount < this.bufferSize) {\n        this.dataCount++;\n      } else {\n        // Buffer is full, move read index\n        this.readIndex = (this.readIndex + 1) % this.bufferSize;\n      }\n    }\n\n    // Return processed chunk if we have enough data\n    if (this.dataCount >= 160) {\n      // 160 samples = 10ms at 16kHz\n      return this.getAudioChunk(160);\n    }\n    return null;\n  }\n\n  /**\n   * Get audio chunk from buffer\n   * @param {number} chunkSize - Size of chunk to return\n   * @returns {Int16Array} - Audio chunk\n   */\n  getAudioChunk(chunkSize) {\n    const chunk = new Int16Array(chunkSize);\n    for (let i = 0; i < chunkSize; i++) {\n      chunk[i] = this.buffer[this.readIndex];\n      this.readIndex = (this.readIndex + 1) % this.bufferSize;\n      this.dataCount--;\n    }\n    return chunk;\n  }\n\n  /**\n   * Convert Int16Array to Uint8Array for Deepgram\n   * @param {Int16Array} audioData - 16-bit audio data\n   * @returns {Uint8Array} - 8-bit audio data for Deepgram\n   */\n  convertForDeepgram(audioData) {\n    const uint8Array = new Uint8Array(audioData.length * 2);\n    const view = new DataView(uint8Array.buffer);\n    for (let i = 0; i < audioData.length; i++) {\n      // Convert Int16 to little-endian bytes\n      view.setInt16(i * 2, audioData[i], true);\n    }\n    return uint8Array;\n  }\n\n  /**\n   * Validate audio data quality\n   * @param {Int16Array} audioData - Audio data to validate\n   * @returns {Object} - Validation result with quality metrics\n   */\n  validateAudioData(audioData) {\n    const samples = Array.from(audioData);\n    const min = Math.min(...samples);\n    const max = Math.max(...samples);\n    const mean = samples.reduce((a, b) => a + b, 0) / samples.length;\n    const rms = Math.sqrt(samples.reduce((a, b) => a + b * b, 0) / samples.length);\n    const quality = {\n      isValid: true,\n      min,\n      max,\n      mean: Math.round(mean),\n      rms: Math.round(rms),\n      dynamicRange: max - min,\n      isSilent: max - min < 100,\n      isClipping: Math.abs(max) > 30000 || Math.abs(min) > 30000\n    };\n    if (quality.isSilent) {\n      quality.isValid = false;\n      console.warn('⚠️ Audio appears to be silent');\n    }\n    if (quality.isClipping) {\n      quality.isValid = false;\n      console.warn('⚠️ Audio appears to be clipping');\n    }\n    return quality;\n  }\n\n  /**\n   * Create WAV blob from audio data\n   * @param {Int16Array} audioData - Audio data\n   * @param {number} duration - Duration in seconds\n   * @returns {Blob} - WAV file blob\n   */\n  createWavBlob(audioData, duration = null) {\n    const CHANNELS = 1;\n    const SAMPLE_WIDTH = 2;\n    const sampleRate = this.sampleRate;\n    const buffer = new ArrayBuffer(44 + audioData.length * 2);\n    const view = new DataView(buffer);\n\n    // WAV header\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + audioData.length * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, CHANNELS, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(32, CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, audioData.length * 2, true);\n\n    // Write audio data\n    let offset = 44;\n    for (let i = 0; i < audioData.length; i++) {\n      view.setInt16(offset, audioData[i], true);\n      offset += 2;\n    }\n    return new Blob([buffer], {\n      type: 'audio/wav'\n    });\n  }\n\n  /**\n   * Reset the audio processor\n   */\n  reset() {\n    this.writeIndex = 0;\n    this.readIndex = 0;\n    this.dataCount = 0;\n    this.buffer.fill(0);\n  }\n\n  /**\n   * Get current buffer status\n   * @returns {Object} - Buffer status information\n   */\n  getBufferStatus() {\n    return {\n      dataCount: this.dataCount,\n      bufferSize: this.bufferSize,\n      writeIndex: this.writeIndex,\n      readIndex: this.readIndex,\n      utilization: this.dataCount / this.bufferSize * 100\n    };\n  }\n}\n\n// Export singleton instance\nexport const audioProcessor = new AudioProcessor();","map":{"version":3,"names":["AudioProcessor","constructor","sampleRate","bufferSize","buffer","Int16Array","writeIndex","readIndex","dataCount","processAudioData","audioData","length","i","getAudioChunk","chunkSize","chunk","convertForDeepgram","uint8Array","Uint8Array","view","DataView","setInt16","validateAudioData","samples","Array","from","min","Math","max","mean","reduce","a","b","rms","sqrt","quality","isValid","round","dynamicRange","isSilent","isClipping","abs","console","warn","createWavBlob","duration","CHANNELS","SAMPLE_WIDTH","ArrayBuffer","writeString","offset","string","setUint8","charCodeAt","setUint32","setUint16","Blob","type","reset","fill","getBufferStatus","utilization","audioProcessor"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/src/utils/AudioProcessor.js"],"sourcesContent":["/**\n * Audio Processor Utility\n * Handles audio data conversion and processing for XIAO nRF52840 Sense\n */\n\nexport class AudioProcessor {\n  constructor() {\n    this.sampleRate = 16000; // Default sample rate from XIAO board\n    this.bufferSize = 8192; // Ring buffer size\n    this.buffer = new Int16Array(this.bufferSize);\n    this.writeIndex = 0;\n    this.readIndex = 0;\n    this.dataCount = 0;\n  }\n\n  /**\n   * Process incoming audio data from BLE\n   * @param {Int16Array} audioData - Raw audio data from XIAO board\n   * @returns {Int16Array|null} - Processed audio chunk or null if not ready\n   */\n  processAudioData(audioData) {\n    if (!audioData || audioData.length === 0) {\n      return null;\n    }\n\n    // Add data to ring buffer\n    for (let i = 0; i < audioData.length; i++) {\n      this.buffer[this.writeIndex] = audioData[i];\n      this.writeIndex = (this.writeIndex + 1) % this.bufferSize;\n      \n      if (this.dataCount < this.bufferSize) {\n        this.dataCount++;\n      } else {\n        // Buffer is full, move read index\n        this.readIndex = (this.readIndex + 1) % this.bufferSize;\n      }\n    }\n\n    // Return processed chunk if we have enough data\n    if (this.dataCount >= 160) { // 160 samples = 10ms at 16kHz\n      return this.getAudioChunk(160);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get audio chunk from buffer\n   * @param {number} chunkSize - Size of chunk to return\n   * @returns {Int16Array} - Audio chunk\n   */\n  getAudioChunk(chunkSize) {\n    const chunk = new Int16Array(chunkSize);\n    \n    for (let i = 0; i < chunkSize; i++) {\n      chunk[i] = this.buffer[this.readIndex];\n      this.readIndex = (this.readIndex + 1) % this.bufferSize;\n      this.dataCount--;\n    }\n\n    return chunk;\n  }\n\n  /**\n   * Convert Int16Array to Uint8Array for Deepgram\n   * @param {Int16Array} audioData - 16-bit audio data\n   * @returns {Uint8Array} - 8-bit audio data for Deepgram\n   */\n  convertForDeepgram(audioData) {\n    const uint8Array = new Uint8Array(audioData.length * 2);\n    const view = new DataView(uint8Array.buffer);\n    \n    for (let i = 0; i < audioData.length; i++) {\n      // Convert Int16 to little-endian bytes\n      view.setInt16(i * 2, audioData[i], true);\n    }\n    \n    return uint8Array;\n  }\n\n  /**\n   * Validate audio data quality\n   * @param {Int16Array} audioData - Audio data to validate\n   * @returns {Object} - Validation result with quality metrics\n   */\n  validateAudioData(audioData) {\n    const samples = Array.from(audioData);\n    const min = Math.min(...samples);\n    const max = Math.max(...samples);\n    const mean = samples.reduce((a, b) => a + b, 0) / samples.length;\n    const rms = Math.sqrt(samples.reduce((a, b) => a + b * b, 0) / samples.length);\n    \n    const quality = {\n      isValid: true,\n      min,\n      max,\n      mean: Math.round(mean),\n      rms: Math.round(rms),\n      dynamicRange: max - min,\n      isSilent: max - min < 100,\n      isClipping: Math.abs(max) > 30000 || Math.abs(min) > 30000\n    };\n\n    if (quality.isSilent) {\n      quality.isValid = false;\n      console.warn('⚠️ Audio appears to be silent');\n    }\n\n    if (quality.isClipping) {\n      quality.isValid = false;\n      console.warn('⚠️ Audio appears to be clipping');\n    }\n\n    return quality;\n  }\n\n  /**\n   * Create WAV blob from audio data\n   * @param {Int16Array} audioData - Audio data\n   * @param {number} duration - Duration in seconds\n   * @returns {Blob} - WAV file blob\n   */\n  createWavBlob(audioData, duration = null) {\n    const CHANNELS = 1;\n    const SAMPLE_WIDTH = 2;\n    const sampleRate = this.sampleRate;\n    \n    const buffer = new ArrayBuffer(44 + audioData.length * 2);\n    const view = new DataView(buffer);\n    \n    // WAV header\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + audioData.length * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, CHANNELS, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(32, CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, audioData.length * 2, true);\n    \n    // Write audio data\n    let offset = 44;\n    for (let i = 0; i < audioData.length; i++) {\n      view.setInt16(offset, audioData[i], true);\n      offset += 2;\n    }\n    \n    return new Blob([buffer], { type: 'audio/wav' });\n  }\n\n  /**\n   * Reset the audio processor\n   */\n  reset() {\n    this.writeIndex = 0;\n    this.readIndex = 0;\n    this.dataCount = 0;\n    this.buffer.fill(0);\n  }\n\n  /**\n   * Get current buffer status\n   * @returns {Object} - Buffer status information\n   */\n  getBufferStatus() {\n    return {\n      dataCount: this.dataCount,\n      bufferSize: this.bufferSize,\n      writeIndex: this.writeIndex,\n      readIndex: this.readIndex,\n      utilization: (this.dataCount / this.bufferSize) * 100\n    };\n  }\n}\n\n// Export singleton instance\nexport const audioProcessor = new AudioProcessor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}