{"ast":null,"code":"import _objectSpread from\"/Users/armeshpereira/Documents/LastAttempt/reactapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Deepgram Service\n * Handles real-time audio transcription using Deepgram Nova-3 API\n */import{createClient,LiveTranscriptionEvents}from'@deepgram/sdk';export class DeepgramService{constructor(){this.apiKey='6f8cc0568676f91acc28784457aea240539e9aab';this.connection=null;this.isConnected=false;this.isTranscribing=false;this.listeners={onTranscript:null,onError:null,onOpen:null,onClose:null};}/**\n   * Initialize Deepgram connection\n   * @returns {Promise<boolean>} - Success status\n   */async initialize(){try{if(!this.apiKey){throw new Error('Deepgram API key not configured');}console.log('üîß Initializing Deepgram Nova-3...');const deepgram=createClient(this.apiKey);this.connection=deepgram.listen.live({model:'nova-3-general',language:'en-US',smart_format:true,interim_results:true,endpointing:300,utterance_end_ms:1000,vad_events:true,encoding:'linear16',sample_rate:16000,channels:1});// Set up event listeners\nthis.setupEventListeners();return true;}catch(error){console.error('‚ùå Failed to initialize Deepgram:',error);this.handleError(error);return false;}}/**\n   * Set up Deepgram event listeners\n   */setupEventListeners(){if(!this.connection)return;this.connection.on(LiveTranscriptionEvents.Open,()=>{console.log('‚úÖ Deepgram connection opened');this.isConnected=true;this.isTranscribing=true;if(this.listeners.onOpen){this.listeners.onOpen();}});this.connection.on(LiveTranscriptionEvents.Transcript,data=>{try{var _data$channel,_data$channel$alterna,_data$channel$alterna2;const transcript=(_data$channel=data.channel)===null||_data$channel===void 0?void 0:(_data$channel$alterna=_data$channel.alternatives)===null||_data$channel$alterna===void 0?void 0:(_data$channel$alterna2=_data$channel$alterna[0])===null||_data$channel$alterna2===void 0?void 0:_data$channel$alterna2.transcript;if(transcript&&transcript.trim()){console.log(\"\\uD83C\\uDFAF Transcript: \\\"\".concat(transcript,\"\\\" (final: \").concat(data.is_final,\")\"));if(this.listeners.onTranscript){var _data$channel2,_data$channel2$altern,_data$channel2$altern2;this.listeners.onTranscript({text:transcript,isFinal:data.is_final,confidence:((_data$channel2=data.channel)===null||_data$channel2===void 0?void 0:(_data$channel2$altern=_data$channel2.alternatives)===null||_data$channel2$altern===void 0?void 0:(_data$channel2$altern2=_data$channel2$altern[0])===null||_data$channel2$altern2===void 0?void 0:_data$channel2$altern2.confidence)||0});}}}catch(error){console.error('‚ùå Error processing transcript:',error);}});this.connection.on(LiveTranscriptionEvents.Error,error=>{console.error('‚ùå Deepgram error:',error);this.handleError(error);});this.connection.on(LiveTranscriptionEvents.Close,()=>{console.log('üîå Deepgram connection closed');this.isConnected=false;this.isTranscribing=false;if(this.listeners.onClose){this.listeners.onClose();}});}/**\n   * Send audio data to Deepgram\n   * @param {Uint8Array} audioData - Audio data to transcribe\n   */sendAudioData(audioData){if(!this.connection||!this.isConnected){console.warn('‚ö†Ô∏è Deepgram not connected, cannot send audio data');return false;}try{this.connection.send(audioData);return true;}catch(error){console.error('‚ùå Error sending audio to Deepgram:',error);this.handleError(error);return false;}}/**\n   * Start transcription\n   * @returns {Promise<boolean>} - Success status\n   */async startTranscription(){try{const success=await this.initialize();if(success){console.log('üéØ Deepgram transcription started');return true;}return false;}catch(error){console.error('‚ùå Failed to start transcription:',error);this.handleError(error);return false;}}/**\n   * Stop transcription\n   */stopTranscription(){try{if(this.connection){this.connection.finish();this.connection=null;}this.isConnected=false;this.isTranscribing=false;console.log('üõë Deepgram transcription stopped');}catch(error){console.error('‚ùå Error stopping transcription:',error);}}/**\n   * Set event listeners\n   * @param {Object} listeners - Event listener functions\n   */setListeners(listeners){this.listeners=_objectSpread(_objectSpread({},this.listeners),listeners);}/**\n   * Handle errors\n   * @param {Error} error - Error to handle\n   */handleError(error){this.isConnected=false;this.isTranscribing=false;if(this.listeners.onError){this.listeners.onError(error);}}/**\n   * Get connection status\n   * @returns {Object} - Connection status\n   */getStatus(){return{isConnected:this.isConnected,isTranscribing:this.isTranscribing,hasConnection:!!this.connection};}/**\n   * Cleanup resources\n   */cleanup(){this.stopTranscription();this.listeners={onTranscript:null,onError:null,onOpen:null,onClose:null};}}// Export singleton instance\nexport const deepgramService=new DeepgramService();","map":{"version":3,"names":["createClient","LiveTranscriptionEvents","DeepgramService","constructor","apiKey","connection","isConnected","isTranscribing","listeners","onTranscript","onError","onOpen","onClose","initialize","Error","console","log","deepgram","listen","live","model","language","smart_format","interim_results","endpointing","utterance_end_ms","vad_events","encoding","sample_rate","channels","setupEventListeners","error","handleError","on","Open","Transcript","data","_data$channel","_data$channel$alterna","_data$channel$alterna2","transcript","channel","alternatives","trim","concat","is_final","_data$channel2","_data$channel2$altern","_data$channel2$altern2","text","isFinal","confidence","Close","sendAudioData","audioData","warn","send","startTranscription","success","stopTranscription","finish","setListeners","_objectSpread","getStatus","hasConnection","cleanup","deepgramService"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/src/services/DeepgramService.js"],"sourcesContent":["/**\n * Deepgram Service\n * Handles real-time audio transcription using Deepgram Nova-3 API\n */\n\nimport { createClient, LiveTranscriptionEvents } from '@deepgram/sdk';\n\nexport class DeepgramService {\n  constructor() {\n    this.apiKey = '6f8cc0568676f91acc28784457aea240539e9aab';\n    this.connection = null;\n    this.isConnected = false;\n    this.isTranscribing = false;\n    this.listeners = {\n      onTranscript: null,\n      onError: null,\n      onOpen: null,\n      onClose: null\n    };\n  }\n\n  /**\n   * Initialize Deepgram connection\n   * @returns {Promise<boolean>} - Success status\n   */\n  async initialize() {\n    try {\n      if (!this.apiKey) {\n        throw new Error('Deepgram API key not configured');\n      }\n\n      console.log('üîß Initializing Deepgram Nova-3...');\n      \n      const deepgram = createClient(this.apiKey);\n      \n      this.connection = deepgram.listen.live({\n        model: 'nova-3-general',\n        language: 'en-US',\n        smart_format: true,\n        interim_results: true,\n        endpointing: 300,\n        utterance_end_ms: 1000,\n        vad_events: true,\n        encoding: 'linear16',\n        sample_rate: 16000,\n        channels: 1,\n      });\n\n      // Set up event listeners\n      this.setupEventListeners();\n      \n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Deepgram:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Set up Deepgram event listeners\n   */\n  setupEventListeners() {\n    if (!this.connection) return;\n\n    this.connection.on(LiveTranscriptionEvents.Open, () => {\n      console.log('‚úÖ Deepgram connection opened');\n      this.isConnected = true;\n      this.isTranscribing = true;\n      \n      if (this.listeners.onOpen) {\n        this.listeners.onOpen();\n      }\n    });\n\n    this.connection.on(LiveTranscriptionEvents.Transcript, (data) => {\n      try {\n        const transcript = data.channel?.alternatives?.[0]?.transcript;\n        \n        if (transcript && transcript.trim()) {\n          console.log(`üéØ Transcript: \"${transcript}\" (final: ${data.is_final})`);\n          \n          if (this.listeners.onTranscript) {\n            this.listeners.onTranscript({\n              text: transcript,\n              isFinal: data.is_final,\n              confidence: data.channel?.alternatives?.[0]?.confidence || 0\n            });\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Error processing transcript:', error);\n      }\n    });\n\n    this.connection.on(LiveTranscriptionEvents.Error, (error) => {\n      console.error('‚ùå Deepgram error:', error);\n      this.handleError(error);\n    });\n\n    this.connection.on(LiveTranscriptionEvents.Close, () => {\n      console.log('üîå Deepgram connection closed');\n      this.isConnected = false;\n      this.isTranscribing = false;\n      \n      if (this.listeners.onClose) {\n        this.listeners.onClose();\n      }\n    });\n  }\n\n  /**\n   * Send audio data to Deepgram\n   * @param {Uint8Array} audioData - Audio data to transcribe\n   */\n  sendAudioData(audioData) {\n    if (!this.connection || !this.isConnected) {\n      console.warn('‚ö†Ô∏è Deepgram not connected, cannot send audio data');\n      return false;\n    }\n\n    try {\n      this.connection.send(audioData);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error sending audio to Deepgram:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Start transcription\n   * @returns {Promise<boolean>} - Success status\n   */\n  async startTranscription() {\n    try {\n      const success = await this.initialize();\n      if (success) {\n        console.log('üéØ Deepgram transcription started');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('‚ùå Failed to start transcription:', error);\n      this.handleError(error);\n      return false;\n    }\n  }\n\n  /**\n   * Stop transcription\n   */\n  stopTranscription() {\n    try {\n      if (this.connection) {\n        this.connection.finish();\n        this.connection = null;\n      }\n      \n      this.isConnected = false;\n      this.isTranscribing = false;\n      \n      console.log('üõë Deepgram transcription stopped');\n    } catch (error) {\n      console.error('‚ùå Error stopping transcription:', error);\n    }\n  }\n\n  /**\n   * Set event listeners\n   * @param {Object} listeners - Event listener functions\n   */\n  setListeners(listeners) {\n    this.listeners = { ...this.listeners, ...listeners };\n  }\n\n  /**\n   * Handle errors\n   * @param {Error} error - Error to handle\n   */\n  handleError(error) {\n    this.isConnected = false;\n    this.isTranscribing = false;\n    \n    if (this.listeners.onError) {\n      this.listeners.onError(error);\n    }\n  }\n\n  /**\n   * Get connection status\n   * @returns {Object} - Connection status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      isTranscribing: this.isTranscribing,\n      hasConnection: !!this.connection\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    this.stopTranscription();\n    this.listeners = {\n      onTranscript: null,\n      onError: null,\n      onOpen: null,\n      onClose: null\n    };\n  }\n}\n\n// Export singleton instance\nexport const deepgramService = new DeepgramService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}