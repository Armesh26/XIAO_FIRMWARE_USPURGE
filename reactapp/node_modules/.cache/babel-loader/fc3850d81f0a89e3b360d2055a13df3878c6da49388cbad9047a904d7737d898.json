{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * Represents a REST client for interacting with the Deepgram API.\n *\n * The `ModelsRestClient` class provides methods for interacting with the Deepgram API to retrieve information about available models.\n * @extends AbstractRestClient\n */\nexport class ModelsRestClient extends AbstractRestClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"models\";\n  }\n  /**\n   * Retrieves a list of all available models.\n   *\n   * @param endpoint - (optional) The endpoint to request.\n   * @returns A promise that resolves with the response from the Deepgram API.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: models, error } = deepgram.models.getAll();\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(models);\n   * }\n   * ```\n   */\n  getAll() {\n    let endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \":version/models\";\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {}, options);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves information about a specific model.\n   *\n   * @param modelId - The UUID of the model to retrieve.\n   * @param endpoint - (optional) The endpoint to request.\n   * @returns A promise that resolves with the response from the Deepgram API.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: model, error } = deepgram.models.getModel(\"modelId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(model);\n   * }\n   * ```\n   */\n  getModel(modelId) {\n    let endpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \":version/models/:modelId\";\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          modelId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["isDeepgramError","AbstractRestClient","ModelsRestClient","constructor","namespace","getAll","endpoint","arguments","length","undefined","options","requestUrl","getRequestUrl","result","get","then","json","error","getModel","modelId"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/node_modules/@deepgram/sdk/src/packages/ModelsRestClient.ts"],"sourcesContent":["import { isDeepgramError } from \"../lib/errors\";\nimport {\n  DeepgramResponse,\n  GetModelResponse,\n  GetModelsResponse,\n  GetModelsSchema,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * Represents a REST client for interacting with the Deepgram API.\n *\n * The `ModelsRestClient` class provides methods for interacting with the Deepgram API to retrieve information about available models.\n * @extends AbstractRestClient\n */\nexport class ModelsRestClient extends AbstractRestClient {\n  public namespace: string = \"models\";\n\n  /**\n   * Retrieves a list of all available models.\n   *\n   * @param endpoint - (optional) The endpoint to request.\n   * @returns A promise that resolves with the response from the Deepgram API.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: models, error } = deepgram.models.getAll();\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(models);\n   * }\n   * ```\n   */\n  async getAll(\n    endpoint = \":version/models\",\n    options: GetModelsSchema = {}\n  ): Promise<DeepgramResponse<GetModelsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, {}, options);\n      const result: GetModelsResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves information about a specific model.\n   *\n   * @param modelId - The UUID of the model to retrieve.\n   * @param endpoint - (optional) The endpoint to request.\n   * @returns A promise that resolves with the response from the Deepgram API.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: model, error } = deepgram.models.getModel(\"modelId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(model);\n   * }\n   * ```\n   */\n  async getModel(\n    modelId: string,\n    endpoint = \":version/models/:modelId\"\n  ): Promise<DeepgramResponse<GetModelResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { modelId });\n      const result: GetModelResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,eAAe,QAAQ,eAAe;AAO/C,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD;;;;;;AAMA,OAAM,MAAOC,gBAAiB,SAAQD,kBAAkB;EAAxDE,YAAA;;IACS,KAAAC,SAAS,GAAW,QAAQ;EA4ErC;EA1EE;;;;;;;;;;;;;;;;;;;EAmBMC,MAAMA,CAAA,EAEmB;IAAA,IAD7BC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,iBAAiB;IAAA,IAC5BG,OAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2B,EAAE;;MAE7B,IAAI;QACF,MAAMI,UAAU,GAAG,IAAI,CAACC,aAAa,CAACN,QAAQ,EAAE,EAAE,EAAEI,OAAO,CAAC;QAC5D,MAAMG,MAAM,GAAsB,MAAM,IAAI,CAACC,GAAG,CAACH,UAAU,CAAC,CAACI,IAAI,CAAEF,MAAM,IAAKA,MAAM,CAACG,IAAI,EAAE,CAAC;QAE5F,OAAO;UAAEH,MAAM;UAAEI,KAAK,EAAE;QAAI,CAAE;OAC/B,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIjB,eAAe,CAACiB,KAAK,CAAC,EAAE;UAC1B,OAAO;YAAEJ,MAAM,EAAE,IAAI;YAAEI;UAAK,CAAE;;QAGhC,MAAMA,KAAK;;IAEf,CAAC;;EAED;;;;;;;;;;;;;;;;;;;;EAoBMC,QAAQA,CACZC,OAAe,EACsB;IAAA,IAArCb,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,0BAA0B;;MAErC,IAAI;QACF,MAAMI,UAAU,GAAG,IAAI,CAACC,aAAa,CAACN,QAAQ,EAAE;UAAEa;QAAO,CAAE,CAAC;QAC5D,MAAMN,MAAM,GAAqB,MAAM,IAAI,CAACC,GAAG,CAACH,UAAU,CAAC,CAACI,IAAI,CAAEF,MAAM,IAAKA,MAAM,CAACG,IAAI,EAAE,CAAC;QAE3F,OAAO;UAAEH,MAAM;UAAEI,KAAK,EAAE;QAAI,CAAE;OAC/B,CAAC,OAAOA,KAAK,EAAE;QACd,IAAIjB,eAAe,CAACiB,KAAK,CAAC,EAAE;UAC1B,OAAO;YAAEJ,MAAM,EAAE,IAAI;YAAEI;UAAK,CAAE;;QAGhC,MAAMA,KAAK;;IAEf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}