{"ast":null,"code":"/**\n * Audio Processor Utility\n * Handles audio data conversion and processing for XIAO nRF52840 Sense\n */export class AudioProcessor{constructor(){this.sampleRate=16000;// Default sample rate from XIAO board\nthis.bufferSize=8192;// Ring buffer size\nthis.buffer=new Int16Array(this.bufferSize);this.writeIndex=0;this.readIndex=0;this.dataCount=0;}/**\n   * Process incoming audio data from BLE\n   * @param {Int16Array} audioData - Raw audio data from XIAO board\n   * @returns {Int16Array|null} - Processed audio chunk or null if not ready\n   */processAudioData(audioData){if(!audioData||audioData.length===0){return null;}// Add data to ring buffer\nfor(let i=0;i<audioData.length;i++){this.buffer[this.writeIndex]=audioData[i];this.writeIndex=(this.writeIndex+1)%this.bufferSize;if(this.dataCount<this.bufferSize){this.dataCount++;}else{// Buffer is full, move read index\nthis.readIndex=(this.readIndex+1)%this.bufferSize;}}// Return processed chunk if we have enough data\nif(this.dataCount>=160){// 160 samples = 10ms at 16kHz\nreturn this.getAudioChunk(160);}return null;}/**\n   * Get audio chunk from buffer\n   * @param {number} chunkSize - Size of chunk to return\n   * @returns {Int16Array} - Audio chunk\n   */getAudioChunk(chunkSize){const chunk=new Int16Array(chunkSize);for(let i=0;i<chunkSize;i++){chunk[i]=this.buffer[this.readIndex];this.readIndex=(this.readIndex+1)%this.bufferSize;this.dataCount--;}return chunk;}/**\n   * Convert Int16Array to Uint8Array for Deepgram\n   * @param {Int16Array} audioData - 16-bit audio data\n   * @returns {Uint8Array} - 8-bit audio data for Deepgram\n   */convertForDeepgram(audioData){const uint8Array=new Uint8Array(audioData.length*2);const view=new DataView(uint8Array.buffer);for(let i=0;i<audioData.length;i++){// Convert Int16 to little-endian bytes\nview.setInt16(i*2,audioData[i],true);}return uint8Array;}/**\n   * Validate audio data quality\n   * @param {Int16Array} audioData - Audio data to validate\n   * @returns {Object} - Validation result with quality metrics\n   */validateAudioData(audioData){const samples=Array.from(audioData);const min=Math.min(...samples);const max=Math.max(...samples);const mean=samples.reduce((a,b)=>a+b,0)/samples.length;const rms=Math.sqrt(samples.reduce((a,b)=>a+b*b,0)/samples.length);const quality={isValid:true,min,max,mean:Math.round(mean),rms:Math.round(rms),dynamicRange:max-min,isSilent:max-min<100,isClipping:Math.abs(max)>30000||Math.abs(min)>30000};if(quality.isSilent){quality.isValid=false;console.warn('⚠️ Audio appears to be silent');}if(quality.isClipping){quality.isValid=false;console.warn('⚠️ Audio appears to be clipping');}return quality;}/**\n   * Create WAV blob from audio data\n   * @param {Int16Array} audioData - Audio data\n   * @param {number} duration - Duration in seconds\n   * @returns {Blob} - WAV file blob\n   */createWavBlob(audioData){let duration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const CHANNELS=1;const SAMPLE_WIDTH=2;const sampleRate=this.sampleRate;const buffer=new ArrayBuffer(44+audioData.length*2);const view=new DataView(buffer);// WAV header\nconst writeString=(offset,string)=>{for(let i=0;i<string.length;i++){view.setUint8(offset+i,string.charCodeAt(i));}};writeString(0,'RIFF');view.setUint32(4,36+audioData.length*2,true);writeString(8,'WAVE');writeString(12,'fmt ');view.setUint32(16,16,true);view.setUint16(20,1,true);view.setUint16(22,CHANNELS,true);view.setUint32(24,sampleRate,true);view.setUint32(28,sampleRate*CHANNELS*SAMPLE_WIDTH,true);view.setUint16(32,CHANNELS*SAMPLE_WIDTH,true);view.setUint16(34,16,true);writeString(36,'data');view.setUint32(40,audioData.length*2,true);// Write audio data\nlet offset=44;for(let i=0;i<audioData.length;i++){view.setInt16(offset,audioData[i],true);offset+=2;}return new Blob([buffer],{type:'audio/wav'});}/**\n   * Reset the audio processor\n   */reset(){this.writeIndex=0;this.readIndex=0;this.dataCount=0;this.buffer.fill(0);}/**\n   * Get current buffer status\n   * @returns {Object} - Buffer status information\n   */getBufferStatus(){return{dataCount:this.dataCount,bufferSize:this.bufferSize,writeIndex:this.writeIndex,readIndex:this.readIndex,utilization:this.dataCount/this.bufferSize*100};}}// Export singleton instance\nexport const audioProcessor=new AudioProcessor();","map":{"version":3,"names":["AudioProcessor","constructor","sampleRate","bufferSize","buffer","Int16Array","writeIndex","readIndex","dataCount","processAudioData","audioData","length","i","getAudioChunk","chunkSize","chunk","convertForDeepgram","uint8Array","Uint8Array","view","DataView","setInt16","validateAudioData","samples","Array","from","min","Math","max","mean","reduce","a","b","rms","sqrt","quality","isValid","round","dynamicRange","isSilent","isClipping","abs","console","warn","createWavBlob","duration","arguments","undefined","CHANNELS","SAMPLE_WIDTH","ArrayBuffer","writeString","offset","string","setUint8","charCodeAt","setUint32","setUint16","Blob","type","reset","fill","getBufferStatus","utilization","audioProcessor"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/src/utils/AudioProcessor.js"],"sourcesContent":["/**\n * Audio Processor Utility\n * Handles audio data conversion and processing for XIAO nRF52840 Sense\n */\n\nexport class AudioProcessor {\n  constructor() {\n    this.sampleRate = 16000; // Default sample rate from XIAO board\n    this.bufferSize = 8192; // Ring buffer size\n    this.buffer = new Int16Array(this.bufferSize);\n    this.writeIndex = 0;\n    this.readIndex = 0;\n    this.dataCount = 0;\n  }\n\n  /**\n   * Process incoming audio data from BLE\n   * @param {Int16Array} audioData - Raw audio data from XIAO board\n   * @returns {Int16Array|null} - Processed audio chunk or null if not ready\n   */\n  processAudioData(audioData) {\n    if (!audioData || audioData.length === 0) {\n      return null;\n    }\n\n    // Add data to ring buffer\n    for (let i = 0; i < audioData.length; i++) {\n      this.buffer[this.writeIndex] = audioData[i];\n      this.writeIndex = (this.writeIndex + 1) % this.bufferSize;\n      \n      if (this.dataCount < this.bufferSize) {\n        this.dataCount++;\n      } else {\n        // Buffer is full, move read index\n        this.readIndex = (this.readIndex + 1) % this.bufferSize;\n      }\n    }\n\n    // Return processed chunk if we have enough data\n    if (this.dataCount >= 160) { // 160 samples = 10ms at 16kHz\n      return this.getAudioChunk(160);\n    }\n\n    return null;\n  }\n\n  /**\n   * Get audio chunk from buffer\n   * @param {number} chunkSize - Size of chunk to return\n   * @returns {Int16Array} - Audio chunk\n   */\n  getAudioChunk(chunkSize) {\n    const chunk = new Int16Array(chunkSize);\n    \n    for (let i = 0; i < chunkSize; i++) {\n      chunk[i] = this.buffer[this.readIndex];\n      this.readIndex = (this.readIndex + 1) % this.bufferSize;\n      this.dataCount--;\n    }\n\n    return chunk;\n  }\n\n  /**\n   * Convert Int16Array to Uint8Array for Deepgram\n   * @param {Int16Array} audioData - 16-bit audio data\n   * @returns {Uint8Array} - 8-bit audio data for Deepgram\n   */\n  convertForDeepgram(audioData) {\n    const uint8Array = new Uint8Array(audioData.length * 2);\n    const view = new DataView(uint8Array.buffer);\n    \n    for (let i = 0; i < audioData.length; i++) {\n      // Convert Int16 to little-endian bytes\n      view.setInt16(i * 2, audioData[i], true);\n    }\n    \n    return uint8Array;\n  }\n\n  /**\n   * Validate audio data quality\n   * @param {Int16Array} audioData - Audio data to validate\n   * @returns {Object} - Validation result with quality metrics\n   */\n  validateAudioData(audioData) {\n    const samples = Array.from(audioData);\n    const min = Math.min(...samples);\n    const max = Math.max(...samples);\n    const mean = samples.reduce((a, b) => a + b, 0) / samples.length;\n    const rms = Math.sqrt(samples.reduce((a, b) => a + b * b, 0) / samples.length);\n    \n    const quality = {\n      isValid: true,\n      min,\n      max,\n      mean: Math.round(mean),\n      rms: Math.round(rms),\n      dynamicRange: max - min,\n      isSilent: max - min < 100,\n      isClipping: Math.abs(max) > 30000 || Math.abs(min) > 30000\n    };\n\n    if (quality.isSilent) {\n      quality.isValid = false;\n      console.warn('⚠️ Audio appears to be silent');\n    }\n\n    if (quality.isClipping) {\n      quality.isValid = false;\n      console.warn('⚠️ Audio appears to be clipping');\n    }\n\n    return quality;\n  }\n\n  /**\n   * Create WAV blob from audio data\n   * @param {Int16Array} audioData - Audio data\n   * @param {number} duration - Duration in seconds\n   * @returns {Blob} - WAV file blob\n   */\n  createWavBlob(audioData, duration = null) {\n    const CHANNELS = 1;\n    const SAMPLE_WIDTH = 2;\n    const sampleRate = this.sampleRate;\n    \n    const buffer = new ArrayBuffer(44 + audioData.length * 2);\n    const view = new DataView(buffer);\n    \n    // WAV header\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + audioData.length * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, CHANNELS, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(32, CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, audioData.length * 2, true);\n    \n    // Write audio data\n    let offset = 44;\n    for (let i = 0; i < audioData.length; i++) {\n      view.setInt16(offset, audioData[i], true);\n      offset += 2;\n    }\n    \n    return new Blob([buffer], { type: 'audio/wav' });\n  }\n\n  /**\n   * Reset the audio processor\n   */\n  reset() {\n    this.writeIndex = 0;\n    this.readIndex = 0;\n    this.dataCount = 0;\n    this.buffer.fill(0);\n  }\n\n  /**\n   * Get current buffer status\n   * @returns {Object} - Buffer status information\n   */\n  getBufferStatus() {\n    return {\n      dataCount: this.dataCount,\n      bufferSize: this.bufferSize,\n      writeIndex: this.writeIndex,\n      readIndex: this.readIndex,\n      utilization: (this.dataCount / this.bufferSize) * 100\n    };\n  }\n}\n\n// Export singleton instance\nexport const audioProcessor = new AudioProcessor();\n"],"mappings":"AAAA;AACA;AACA;AACA,GAEA,MAAO,MAAM,CAAAA,cAAe,CAC1BC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,UAAU,CAAG,KAAK,CAAE;AACzB,IAAI,CAACC,UAAU,CAAG,IAAI,CAAE;AACxB,IAAI,CAACC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,IAAI,CAACF,UAAU,CAAC,CAC7C,IAAI,CAACG,UAAU,CAAG,CAAC,CACnB,IAAI,CAACC,SAAS,CAAG,CAAC,CAClB,IAAI,CAACC,SAAS,CAAG,CAAC,CACpB,CAEA;AACF;AACA;AACA;AACA,KACEC,gBAAgBA,CAACC,SAAS,CAAE,CAC1B,GAAI,CAACA,SAAS,EAAIA,SAAS,CAACC,MAAM,GAAK,CAAC,CAAE,CACxC,MAAO,KAAI,CACb,CAEA;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,SAAS,CAACC,MAAM,CAAEC,CAAC,EAAE,CAAE,CACzC,IAAI,CAACR,MAAM,CAAC,IAAI,CAACE,UAAU,CAAC,CAAGI,SAAS,CAACE,CAAC,CAAC,CAC3C,IAAI,CAACN,UAAU,CAAG,CAAC,IAAI,CAACA,UAAU,CAAG,CAAC,EAAI,IAAI,CAACH,UAAU,CAEzD,GAAI,IAAI,CAACK,SAAS,CAAG,IAAI,CAACL,UAAU,CAAE,CACpC,IAAI,CAACK,SAAS,EAAE,CAClB,CAAC,IAAM,CACL;AACA,IAAI,CAACD,SAAS,CAAG,CAAC,IAAI,CAACA,SAAS,CAAG,CAAC,EAAI,IAAI,CAACJ,UAAU,CACzD,CACF,CAEA;AACA,GAAI,IAAI,CAACK,SAAS,EAAI,GAAG,CAAE,CAAE;AAC3B,MAAO,KAAI,CAACK,aAAa,CAAC,GAAG,CAAC,CAChC,CAEA,MAAO,KAAI,CACb,CAEA;AACF;AACA;AACA;AACA,KACEA,aAAaA,CAACC,SAAS,CAAE,CACvB,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAV,UAAU,CAACS,SAAS,CAAC,CAEvC,IAAK,GAAI,CAAAF,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGE,SAAS,CAAEF,CAAC,EAAE,CAAE,CAClCG,KAAK,CAACH,CAAC,CAAC,CAAG,IAAI,CAACR,MAAM,CAAC,IAAI,CAACG,SAAS,CAAC,CACtC,IAAI,CAACA,SAAS,CAAG,CAAC,IAAI,CAACA,SAAS,CAAG,CAAC,EAAI,IAAI,CAACJ,UAAU,CACvD,IAAI,CAACK,SAAS,EAAE,CAClB,CAEA,MAAO,CAAAO,KAAK,CACd,CAEA;AACF;AACA;AACA;AACA,KACEC,kBAAkBA,CAACN,SAAS,CAAE,CAC5B,KAAM,CAAAO,UAAU,CAAG,GAAI,CAAAC,UAAU,CAACR,SAAS,CAACC,MAAM,CAAG,CAAC,CAAC,CACvD,KAAM,CAAAQ,IAAI,CAAG,GAAI,CAAAC,QAAQ,CAACH,UAAU,CAACb,MAAM,CAAC,CAE5C,IAAK,GAAI,CAAAQ,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,SAAS,CAACC,MAAM,CAAEC,CAAC,EAAE,CAAE,CACzC;AACAO,IAAI,CAACE,QAAQ,CAACT,CAAC,CAAG,CAAC,CAAEF,SAAS,CAACE,CAAC,CAAC,CAAE,IAAI,CAAC,CAC1C,CAEA,MAAO,CAAAK,UAAU,CACnB,CAEA;AACF;AACA;AACA;AACA,KACEK,iBAAiBA,CAACZ,SAAS,CAAE,CAC3B,KAAM,CAAAa,OAAO,CAAGC,KAAK,CAACC,IAAI,CAACf,SAAS,CAAC,CACrC,KAAM,CAAAgB,GAAG,CAAGC,IAAI,CAACD,GAAG,CAAC,GAAGH,OAAO,CAAC,CAChC,KAAM,CAAAK,GAAG,CAAGD,IAAI,CAACC,GAAG,CAAC,GAAGL,OAAO,CAAC,CAChC,KAAM,CAAAM,IAAI,CAAGN,OAAO,CAACO,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAE,CAAC,CAAC,CAAGT,OAAO,CAACZ,MAAM,CAChE,KAAM,CAAAsB,GAAG,CAAGN,IAAI,CAACO,IAAI,CAACX,OAAO,CAACO,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAGA,CAAC,CAAE,CAAC,CAAC,CAAGT,OAAO,CAACZ,MAAM,CAAC,CAE9E,KAAM,CAAAwB,OAAO,CAAG,CACdC,OAAO,CAAE,IAAI,CACbV,GAAG,CACHE,GAAG,CACHC,IAAI,CAAEF,IAAI,CAACU,KAAK,CAACR,IAAI,CAAC,CACtBI,GAAG,CAAEN,IAAI,CAACU,KAAK,CAACJ,GAAG,CAAC,CACpBK,YAAY,CAAEV,GAAG,CAAGF,GAAG,CACvBa,QAAQ,CAAEX,GAAG,CAAGF,GAAG,CAAG,GAAG,CACzBc,UAAU,CAAEb,IAAI,CAACc,GAAG,CAACb,GAAG,CAAC,CAAG,KAAK,EAAID,IAAI,CAACc,GAAG,CAACf,GAAG,CAAC,CAAG,KACvD,CAAC,CAED,GAAIS,OAAO,CAACI,QAAQ,CAAE,CACpBJ,OAAO,CAACC,OAAO,CAAG,KAAK,CACvBM,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC,CAC/C,CAEA,GAAIR,OAAO,CAACK,UAAU,CAAE,CACtBL,OAAO,CAACC,OAAO,CAAG,KAAK,CACvBM,OAAO,CAACC,IAAI,CAAC,iCAAiC,CAAC,CACjD,CAEA,MAAO,CAAAR,OAAO,CAChB,CAEA;AACF;AACA;AACA;AACA;AACA,KACES,aAAaA,CAAClC,SAAS,CAAmB,IAAjB,CAAAmC,QAAQ,CAAAC,SAAA,CAAAnC,MAAA,IAAAmC,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,IAAI,CACtC,KAAM,CAAAE,QAAQ,CAAG,CAAC,CAClB,KAAM,CAAAC,YAAY,CAAG,CAAC,CACtB,KAAM,CAAA/C,UAAU,CAAG,IAAI,CAACA,UAAU,CAElC,KAAM,CAAAE,MAAM,CAAG,GAAI,CAAA8C,WAAW,CAAC,EAAE,CAAGxC,SAAS,CAACC,MAAM,CAAG,CAAC,CAAC,CACzD,KAAM,CAAAQ,IAAI,CAAG,GAAI,CAAAC,QAAQ,CAAChB,MAAM,CAAC,CAEjC;AACA,KAAM,CAAA+C,WAAW,CAAGA,CAACC,MAAM,CAAEC,MAAM,GAAK,CACtC,IAAK,GAAI,CAAAzC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGyC,MAAM,CAAC1C,MAAM,CAAEC,CAAC,EAAE,CAAE,CACtCO,IAAI,CAACmC,QAAQ,CAACF,MAAM,CAAGxC,CAAC,CAAEyC,MAAM,CAACE,UAAU,CAAC3C,CAAC,CAAC,CAAC,CACjD,CACF,CAAC,CAEDuC,WAAW,CAAC,CAAC,CAAE,MAAM,CAAC,CACtBhC,IAAI,CAACqC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAG9C,SAAS,CAACC,MAAM,CAAG,CAAC,CAAE,IAAI,CAAC,CAClDwC,WAAW,CAAC,CAAC,CAAE,MAAM,CAAC,CACtBA,WAAW,CAAC,EAAE,CAAE,MAAM,CAAC,CACvBhC,IAAI,CAACqC,SAAS,CAAC,EAAE,CAAE,EAAE,CAAE,IAAI,CAAC,CAC5BrC,IAAI,CAACsC,SAAS,CAAC,EAAE,CAAE,CAAC,CAAE,IAAI,CAAC,CAC3BtC,IAAI,CAACsC,SAAS,CAAC,EAAE,CAAET,QAAQ,CAAE,IAAI,CAAC,CAClC7B,IAAI,CAACqC,SAAS,CAAC,EAAE,CAAEtD,UAAU,CAAE,IAAI,CAAC,CACpCiB,IAAI,CAACqC,SAAS,CAAC,EAAE,CAAEtD,UAAU,CAAG8C,QAAQ,CAAGC,YAAY,CAAE,IAAI,CAAC,CAC9D9B,IAAI,CAACsC,SAAS,CAAC,EAAE,CAAET,QAAQ,CAAGC,YAAY,CAAE,IAAI,CAAC,CACjD9B,IAAI,CAACsC,SAAS,CAAC,EAAE,CAAE,EAAE,CAAE,IAAI,CAAC,CAC5BN,WAAW,CAAC,EAAE,CAAE,MAAM,CAAC,CACvBhC,IAAI,CAACqC,SAAS,CAAC,EAAE,CAAE9C,SAAS,CAACC,MAAM,CAAG,CAAC,CAAE,IAAI,CAAC,CAE9C;AACA,GAAI,CAAAyC,MAAM,CAAG,EAAE,CACf,IAAK,GAAI,CAAAxC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,SAAS,CAACC,MAAM,CAAEC,CAAC,EAAE,CAAE,CACzCO,IAAI,CAACE,QAAQ,CAAC+B,MAAM,CAAE1C,SAAS,CAACE,CAAC,CAAC,CAAE,IAAI,CAAC,CACzCwC,MAAM,EAAI,CAAC,CACb,CAEA,MAAO,IAAI,CAAAM,IAAI,CAAC,CAACtD,MAAM,CAAC,CAAE,CAAEuD,IAAI,CAAE,WAAY,CAAC,CAAC,CAClD,CAEA;AACF;AACA,KACEC,KAAKA,CAAA,CAAG,CACN,IAAI,CAACtD,UAAU,CAAG,CAAC,CACnB,IAAI,CAACC,SAAS,CAAG,CAAC,CAClB,IAAI,CAACC,SAAS,CAAG,CAAC,CAClB,IAAI,CAACJ,MAAM,CAACyD,IAAI,CAAC,CAAC,CAAC,CACrB,CAEA;AACF;AACA;AACA,KACEC,eAAeA,CAAA,CAAG,CAChB,MAAO,CACLtD,SAAS,CAAE,IAAI,CAACA,SAAS,CACzBL,UAAU,CAAE,IAAI,CAACA,UAAU,CAC3BG,UAAU,CAAE,IAAI,CAACA,UAAU,CAC3BC,SAAS,CAAE,IAAI,CAACA,SAAS,CACzBwD,WAAW,CAAG,IAAI,CAACvD,SAAS,CAAG,IAAI,CAACL,UAAU,CAAI,GACpD,CAAC,CACH,CACF,CAEA;AACA,MAAO,MAAM,CAAA6D,cAAc,CAAG,GAAI,CAAAhE,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}