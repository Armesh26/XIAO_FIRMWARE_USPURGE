{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `SelfHostedRestClient` class extends the `AbstractRestClient` class and provides methods for interacting with the Deepgram self-hosted API.\n *\n * This class is used to list, retrieve, create, and delete self-hosted credentials for a Deepgram project.\n */\nexport class SelfHostedRestClient extends AbstractRestClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"selfhosted\";\n  }\n  /**\n   * Lists the self-hosted credentials for a Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @returns A promise that resolves to an object containing the list of self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/list-credentials\n   */\n  listCredentials(projectId) {\n    let endpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \":version/projects/:projectId/onprem/distribution/credentials\";\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the self-hosted credentials for a specific Deepgram project and credentials ID.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param credentialsId - The ID of the self-hosted credentials to retrieve.\n   * @returns A promise that resolves to an object containing the self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/get-credentials\n   */\n  getCredentials(projectId, credentialsId) {\n    let endpoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\";\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          credentialsId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates self-hosted credentials for a specific Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param options - The options for creating the self-hosted credentials.\n   * @returns A promise that resolves to an object containing the created self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/create-credentials\n   */\n  createCredentials(projectId, options) {\n    let endpoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \":version/projects/:projectId/onprem/distribution/credentials\";\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const body = JSON.stringify(options);\n        const result = yield this.post(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes self-hosted credentials for a specific Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param credentialsId - The ID of the self-hosted credentials to delete.\n   * @returns A promise that resolves to an object containing a message response and any error that occurred.\n   * @see https://developers.deepgram.com/reference/delete-credentials\n   */\n  deleteCredentials(projectId, credentialsId) {\n    let endpoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\";\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          credentialsId\n        });\n        const result = yield this.delete(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}\nexport { SelfHostedRestClient as OnPremClient };","map":{"version":3,"names":["isDeepgramError","AbstractRestClient","SelfHostedRestClient","constructor","namespace","listCredentials","projectId","endpoint","arguments","length","undefined","requestUrl","getRequestUrl","result","get","then","json","error","getCredentials","credentialsId","createCredentials","options","body","JSON","stringify","post","deleteCredentials","delete","OnPremClient"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/node_modules/@deepgram/sdk/src/packages/SelfHostedRestClient.ts"],"sourcesContent":["import { isDeepgramError } from \"../lib/errors\";\nimport type {\n  CreateOnPremCredentialsSchema,\n  DeepgramResponse,\n  ListOnPremCredentialsResponse,\n  MessageResponse,\n  OnPremCredentialResponse,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `SelfHostedRestClient` class extends the `AbstractRestClient` class and provides methods for interacting with the Deepgram self-hosted API.\n *\n * This class is used to list, retrieve, create, and delete self-hosted credentials for a Deepgram project.\n */\nexport class SelfHostedRestClient extends AbstractRestClient {\n  public namespace: string = \"selfhosted\";\n\n  /**\n   * Lists the self-hosted credentials for a Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @returns A promise that resolves to an object containing the list of self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/list-credentials\n   */\n  async listCredentials(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials\"\n  ): Promise<DeepgramResponse<ListOnPremCredentialsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: ListOnPremCredentialsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the self-hosted credentials for a specific Deepgram project and credentials ID.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param credentialsId - The ID of the self-hosted credentials to retrieve.\n   * @returns A promise that resolves to an object containing the self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/get-credentials\n   */\n  async getCredentials(\n    projectId: string,\n    credentialsId: string,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\"\n  ): Promise<DeepgramResponse<OnPremCredentialResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, credentialsId });\n      const result: OnPremCredentialResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Creates self-hosted credentials for a specific Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param options - The options for creating the self-hosted credentials.\n   * @returns A promise that resolves to an object containing the created self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/create-credentials\n   */\n  async createCredentials(\n    projectId: string,\n    options: CreateOnPremCredentialsSchema,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials\"\n  ): Promise<DeepgramResponse<OnPremCredentialResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const body = JSON.stringify(options);\n\n      const result: OnPremCredentialResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes self-hosted credentials for a specific Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param credentialsId - The ID of the self-hosted credentials to delete.\n   * @returns A promise that resolves to an object containing a message response and any error that occurred.\n   * @see https://developers.deepgram.com/reference/delete-credentials\n   */\n  async deleteCredentials(\n    projectId: string,\n    credentialsId: string,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, credentialsId });\n      const result: MessageResponse = await this.delete(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { SelfHostedRestClient as OnPremClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}