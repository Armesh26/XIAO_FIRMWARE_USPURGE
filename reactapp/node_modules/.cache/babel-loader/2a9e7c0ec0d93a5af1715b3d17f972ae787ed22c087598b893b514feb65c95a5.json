{"ast":null,"code":"/**\r\n * Convert an array of numbers into a DataView.\r\n */\nexport function numbersToDataView(value) {\n  return new DataView(Uint8Array.from(value).buffer);\n}\n/**\r\n * Convert a DataView into an array of numbers.\r\n */\nexport function dataViewToNumbers(value) {\n  return Array.from(new Uint8Array(value.buffer, value.byteOffset, value.byteLength));\n}\n/**\r\n * Convert a string into a DataView.\r\n */\nexport function textToDataView(value) {\n  return numbersToDataView(value.split('').map(s => s.charCodeAt(0)));\n}\n/**\r\n * Convert a DataView into a string.\r\n */\nexport function dataViewToText(value) {\n  return String.fromCharCode(...dataViewToNumbers(value));\n}\n/**\r\n * Convert a 16 bit UUID into a 128 bit UUID string\r\n * @param value number, e.g. 0x180d\r\n * @return string, e.g. '0000180d-0000-1000-8000-00805f9b34fb'\r\n */\nexport function numberToUUID(value) {\n  return \"0000\".concat(value.toString(16).padStart(4, '0'), \"-0000-1000-8000-00805f9b34fb\");\n}\n/**\r\n * Convert a string of hex into a DataView of raw bytes.\r\n * Note: characters other than [0-9a-fA-F] are ignored\r\n * @param hex string of values, e.g. \"00 01 02\" or \"000102\"\r\n * @return DataView of raw bytes\r\n */\nexport function hexStringToDataView(hex) {\n  const bin = [];\n  let i,\n    c,\n    isEmpty = 1,\n    buffer = 0;\n  for (i = 0; i < hex.length; i++) {\n    c = hex.charCodeAt(i);\n    if (c > 47 && c < 58 || c > 64 && c < 71 || c > 96 && c < 103) {\n      buffer = buffer << 4 ^ (c > 64 ? c + 9 : c) & 15;\n      if (isEmpty ^= 1) {\n        bin.push(buffer & 0xff);\n      }\n    }\n  }\n  return numbersToDataView(bin);\n}\nexport function dataViewToHexString(value) {\n  return dataViewToNumbers(value).map(n => {\n    let s = n.toString(16);\n    if (s.length == 1) {\n      s = '0' + s;\n    }\n    return s;\n  }).join('');\n}\nexport function webUUIDToString(uuid) {\n  if (typeof uuid === 'string') {\n    return uuid;\n  } else if (typeof uuid === 'number') {\n    return numberToUUID(uuid);\n  } else {\n    throw new Error('Invalid UUID');\n  }\n}\nexport function mapToObject(map) {\n  const obj = {};\n  if (!map) {\n    return undefined;\n  }\n  map.forEach((value, key) => {\n    obj[key.toString()] = value;\n  });\n  return obj;\n}","map":{"version":3,"names":["numbersToDataView","value","DataView","Uint8Array","from","buffer","dataViewToNumbers","Array","byteOffset","byteLength","textToDataView","split","map","s","charCodeAt","dataViewToText","String","fromCharCode","numberToUUID","concat","toString","padStart","hexStringToDataView","hex","bin","i","c","isEmpty","length","push","dataViewToHexString","n","join","webUUIDToString","uuid","Error","mapToObject","obj","undefined","forEach","key"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/node_modules/@capacitor-community/bluetooth-le/src/conversion.ts"],"sourcesContent":["/**\n * Convert an array of numbers into a DataView.\n */\nexport function numbersToDataView(value: number[]): DataView {\n  return new DataView(Uint8Array.from(value).buffer);\n}\n\n/**\n * Convert a DataView into an array of numbers.\n */\nexport function dataViewToNumbers(value: DataView): number[] {\n  return Array.from(new Uint8Array(value.buffer, value.byteOffset, value.byteLength));\n}\n\n/**\n * Convert a string into a DataView.\n */\nexport function textToDataView(value: string): DataView {\n  return numbersToDataView(value.split('').map((s) => s.charCodeAt(0)));\n}\n\n/**\n * Convert a DataView into a string.\n */\nexport function dataViewToText(value: DataView): string {\n  return String.fromCharCode(...dataViewToNumbers(value));\n}\n\n/**\n * Convert a 16 bit UUID into a 128 bit UUID string\n * @param value number, e.g. 0x180d\n * @return string, e.g. '0000180d-0000-1000-8000-00805f9b34fb'\n */\nexport function numberToUUID(value: number): string {\n  return `0000${value.toString(16).padStart(4, '0')}-0000-1000-8000-00805f9b34fb`;\n}\n\n/**\n * Convert a string of hex into a DataView of raw bytes.\n * Note: characters other than [0-9a-fA-F] are ignored\n * @param hex string of values, e.g. \"00 01 02\" or \"000102\"\n * @return DataView of raw bytes\n */\nexport function hexStringToDataView(hex: string): DataView {\n  const bin = [];\n  let i,\n    c,\n    isEmpty = 1,\n    buffer = 0;\n  for (i = 0; i < hex.length; i++) {\n    c = hex.charCodeAt(i);\n    if ((c > 47 && c < 58) || (c > 64 && c < 71) || (c > 96 && c < 103)) {\n      buffer = (buffer << 4) ^ ((c > 64 ? c + 9 : c) & 15);\n      if ((isEmpty ^= 1)) {\n        bin.push(buffer & 0xff);\n      }\n    }\n  }\n  return numbersToDataView(bin);\n}\n\nexport function dataViewToHexString(value: DataView): string {\n  return dataViewToNumbers(value)\n    .map((n) => {\n      let s = n.toString(16);\n      if (s.length == 1) {\n        s = '0' + s;\n      }\n      return s;\n    })\n    .join('');\n}\n\nexport function webUUIDToString(uuid: string | number): string {\n  if (typeof uuid === 'string') {\n    return uuid;\n  } else if (typeof uuid === 'number') {\n    return numberToUUID(uuid);\n  } else {\n    throw new Error('Invalid UUID');\n  }\n}\n\nexport function mapToObject<V>(map?: Map<string | number, V>): { [key: string]: V } | undefined {\n  const obj: { [key: string]: V } = {};\n  if (!map) {\n    return undefined;\n  }\n  map.forEach((value, key) => {\n    obj[key.toString()] = value;\n  });\n  return obj;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}