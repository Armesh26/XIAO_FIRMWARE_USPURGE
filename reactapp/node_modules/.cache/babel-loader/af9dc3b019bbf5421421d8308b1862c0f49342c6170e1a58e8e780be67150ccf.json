{"ast":null,"code":"import _objectSpread from\"/Users/armeshpereira/Documents/LastAttempt/reactapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{Preferences}from'@capacitor/preferences';import{Filesystem,Directory,Encoding}from'@capacitor/filesystem';import{Capacitor}from'@capacitor/core';export class BleAudioDataManager{constructor(){this.DEVICE_SETTINGS_PREFIX='ble_device_';this.KNOWN_DEVICES_KEY='ble_known_devices';this.RECORDING_SESSIONS_KEY='recording_sessions';}// Device Management with Preferences\nasync saveDeviceSettings(deviceId,settings){await Preferences.set({key:\"\".concat(this.DEVICE_SETTINGS_PREFIX).concat(deviceId),value:JSON.stringify(_objectSpread(_objectSpread({},settings),{},{lastUpdated:new Date().toISOString()}))});}async getDeviceSettings(deviceId){const{value}=await Preferences.get({key:\"\".concat(this.DEVICE_SETTINGS_PREFIX).concat(deviceId)});return value?JSON.parse(value):null;}async addKnownDevice(deviceId,deviceInfo){// Save to known devices list\nconst{value}=await Preferences.get({key:this.KNOWN_DEVICES_KEY});const knownDevices=value?JSON.parse(value):[];const existingIndex=knownDevices.findIndex(d=>d.id===deviceId);const deviceData=_objectSpread(_objectSpread({id:deviceId},deviceInfo),{},{lastSeen:new Date().toISOString()});if(existingIndex>=0){knownDevices[existingIndex]=deviceData;}else{knownDevices.push(deviceData);}await Preferences.set({key:this.KNOWN_DEVICES_KEY,value:JSON.stringify(knownDevices)});}async getKnownDevices(){const{value}=await Preferences.get({key:this.KNOWN_DEVICES_KEY});return value?JSON.parse(value):[];}// Audio Recording Session Management\nasync startRecordingSession(deviceId){let sessionInfo=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const sessionId=\"session_\".concat(deviceId,\"_\").concat(Date.now());const session=_objectSpread({id:sessionId,deviceId,startTime:new Date().toISOString(),status:'recording'},sessionInfo);// Save session info to preferences\nconst{value}=await Preferences.get({key:this.RECORDING_SESSIONS_KEY});const sessions=value?JSON.parse(value):[];sessions.push(session);await Preferences.set({key:this.RECORDING_SESSIONS_KEY,value:JSON.stringify(sessions)});// Create log file for real-time data\nconst logFile=\"audio_stream_\".concat(sessionId,\".log\");const header=\"# Audio Stream Log for \".concat(deviceId,\"\\n# Session: \").concat(sessionId,\"\\n# Started: \").concat(session.startTime,\"\\n\\n\");await Filesystem.writeFile({path:\"audio_logs/\".concat(logFile),data:header,directory:Directory.Documents,encoding:Encoding.UTF8,recursive:true});return{sessionId,logFile};}async logAudioData(sessionId,audioData){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const logFile=\"audio_stream_\".concat(sessionId,\".log\");const timestamp=new Date().toISOString();// Convert Int16Array to readable format\nconst samples=Array.from(audioData);const audioInfo=_objectSpread({timestamp,sessionId,sampleCount:audioData.length,samples:samples.slice(0,10),// First 10 samples for debugging\nrange:{min:Math.min(...samples),max:Math.max(...samples)}},metadata);const logEntry=\"\".concat(timestamp,\" | \").concat(JSON.stringify(audioInfo),\"\\n\");try{await Filesystem.appendFile({path:\"audio_logs/\".concat(logFile),data:logEntry,directory:Directory.Documents,encoding:Encoding.UTF8});}catch(error){console.error('Error logging audio data:',error);}}async saveAudioRecording(sessionId,audioData){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const timestamp=new Date().toISOString().replace(/[:.]/g,'-');const fileName=\"recording_\".concat(sessionId,\"_\").concat(timestamp,\".wav\");// Validate audio data (like Python)\nconsole.log(\"\\uD83D\\uDD0D Validating audio data: \".concat(audioData.length,\" samples\"));const isValid=this.validateAudioData(audioData);if(!isValid){console.warn('⚠️ Audio data validation failed, but continuing...');}// Calculate actual duration and sample rate (like Python)\nconst actualDuration=metadata.duration||audioData.length/16000;const actualSampleRate=this.calculateActualSampleRate(audioData,actualDuration);console.log(\"\\uD83D\\uDCCA Audio Analysis:\");console.log(\"   Samples: \".concat(audioData.length.toLocaleString()));console.log(\"   Duration: \".concat(actualDuration.toFixed(2),\"s\"));console.log(\"   Sample Rate: \".concat(actualSampleRate,\" Hz\"));console.log(\"   Playback Duration: \".concat((audioData.length/actualSampleRate).toFixed(2),\"s\"));// Create WAV file from audio data with dynamic sample rate\nconst wavBlob=this.createWavBlob(audioData,actualDuration);// Convert blob to base64 for storage\nconst arrayBuffer=await wavBlob.arrayBuffer();const base64Data=btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));const recording=_objectSpread({sessionId,fileName,timestamp:new Date().toISOString(),sampleCount:audioData.length,duration:actualDuration,sampleRate:actualSampleRate,playbackDuration:audioData.length/actualSampleRate,fileSize:wavBlob.size,audioQuality:{isValid,min:Math.min(...Array.from(audioData)),max:Math.max(...Array.from(audioData)),dynamicRange:Math.max(...Array.from(audioData))-Math.min(...Array.from(audioData))}},metadata);// Save audio file\nawait Filesystem.writeFile({path:\"recordings/\".concat(fileName),data:base64Data,directory:Directory.Documents,recursive:true});// Save recording metadata\nconst metadataFile=\"recording_\".concat(sessionId,\"_\").concat(timestamp,\".json\");await Filesystem.writeFile({path:\"recordings/\".concat(metadataFile),data:JSON.stringify(recording,null,2),directory:Directory.Documents,encoding:Encoding.UTF8,recursive:true});// Update session status\nawait this.updateSessionStatus(sessionId,'completed',recording);return{fileName,metadataFile,recording};}async updateSessionStatus(sessionId,status){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const{value}=await Preferences.get({key:this.RECORDING_SESSIONS_KEY});const sessions=value?JSON.parse(value):[];const sessionIndex=sessions.findIndex(s=>s.id===sessionId);if(sessionIndex>=0){sessions[sessionIndex]=_objectSpread(_objectSpread({},sessions[sessionIndex]),{},{status,endTime:new Date().toISOString()},data);await Preferences.set({key:this.RECORDING_SESSIONS_KEY,value:JSON.stringify(sessions)});}}async getRecordingSessions(){let deviceId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const{value}=await Preferences.get({key:this.RECORDING_SESSIONS_KEY});const sessions=value?JSON.parse(value):[];return deviceId?sessions.filter(s=>s.deviceId===deviceId):sessions;}async listRecordings(){try{const result=await Filesystem.readdir({path:'recordings',directory:Directory.Documents});return result.files.filter(file=>file.name.endsWith('.wav')||file.name.endsWith('.json'));}catch(error){console.error('Error listing recordings:',error);return[];}}async getRecording(metadataFile){try{const result=await Filesystem.readFile({path:\"recordings/\".concat(metadataFile),directory:Directory.Documents,encoding:Encoding.UTF8});return JSON.parse(result.data);}catch(error){console.error('Error reading recording metadata:',error);return null;}}async playRecording(fileName){try{const result=await Filesystem.readFile({path:\"recordings/\".concat(fileName),directory:Directory.Documents});// Convert base64 back to blob\nconst binaryString=atob(result.data);const bytes=new Uint8Array(binaryString.length);for(let i=0;i<binaryString.length;i++){bytes[i]=binaryString.charCodeAt(i);}return new Blob([bytes],{type:'audio/wav'});}catch(error){console.error('Error reading recording file:',error);return null;}}async exportRecording(fileName){if(Capacitor.isNativePlatform()){// On iOS/Android, file is already in Documents directory\n// User can access it through Files app\nreturn fileName;}else{// On web, trigger download\nconst blob=await this.playRecording(fileName);if(blob){const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=fileName;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);}return fileName;}}async cleanupOldData(){let daysToKeep=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-daysToKeep);// Clean up old sessions\nconst sessions=await this.getRecordingSessions();const recentSessions=sessions.filter(s=>new Date(s.startTime)>cutoffDate);await Preferences.set({key:this.RECORDING_SESSIONS_KEY,value:JSON.stringify(recentSessions)});// Clean up old files\ntry{const recordings=await this.listRecordings();for(const file of recordings){const stat=await Filesystem.stat({path:\"recordings/\".concat(file.name),directory:Directory.Documents});if(stat.mtime<cutoffDate.getTime()){await Filesystem.deleteFile({path:\"recordings/\".concat(file.name),directory:Directory.Documents});console.log(\"Deleted old recording: \".concat(file.name));}}}catch(error){console.error('Error cleaning up old data:',error);}}// Helper method to calculate actual sample rate (like Python)\ncalculateActualSampleRate(audioData,duration){const calculatedRate=audioData.length/duration;if(Math.abs(calculatedRate-16000)/16000<0.1){return 16000;}return Math.round(calculatedRate);}// Helper method to validate audio data (like Python)\nvalidateAudioData(audioData){const samples=Array.from(audioData);const min=Math.min(...samples);const max=Math.max(...samples);const mean=samples.reduce((a,b)=>a+b,0)/samples.length;const rms=Math.sqrt(samples.reduce((a,b)=>a+b*b,0)/samples.length);console.log(\"\\uD83C\\uDFB5 Audio Quality Analysis:\");console.log(\"   Min: \".concat(min,\", Max: \").concat(max));console.log(\"   Mean: \".concat(mean.toFixed(1),\", RMS: \").concat(rms.toFixed(1)));console.log(\"   Dynamic range: \".concat(max-min));// Check for silence or clipping (like Python)\nif(max-min<100){console.warn('⚠️ Audio appears to be silent or very quiet');return false;}if(Math.abs(max)>30000||Math.abs(min)>30000){console.warn('⚠️ Audio appears to be clipping');return false;}return true;}// Helper method to create WAV blob with dynamic sample rate\ncreateWavBlob(audioData){let actualDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const CHANNELS=1;const SAMPLE_WIDTH=2;// Calculate actual sample rate like Python\nlet sampleRate=16000;// Default\nif(actualDuration){sampleRate=this.calculateActualSampleRate(audioData,actualDuration);console.log(\"\\uD83D\\uDCCA Using calculated sample rate: \".concat(sampleRate,\" Hz (duration: \").concat(actualDuration,\"s)\"));}else{console.log(\"\\uD83D\\uDCCA Using default sample rate: \".concat(sampleRate,\" Hz\"));}const buffer=new ArrayBuffer(44+audioData.length*2);const view=new DataView(buffer);// WAV header\nconst writeString=(offset,string)=>{for(let i=0;i<string.length;i++){view.setUint8(offset+i,string.charCodeAt(i));}};writeString(0,'RIFF');view.setUint32(4,36+audioData.length*2,true);writeString(8,'WAVE');writeString(12,'fmt ');view.setUint32(16,16,true);view.setUint16(20,1,true);view.setUint16(22,CHANNELS,true);view.setUint32(24,sampleRate,true);// Use calculated sample rate\nview.setUint32(28,sampleRate*CHANNELS*SAMPLE_WIDTH,true);view.setUint16(32,CHANNELS*SAMPLE_WIDTH,true);view.setUint16(34,16,true);writeString(36,'data');view.setUint32(40,audioData.length*2,true);// Write audio data\nlet offset=44;for(let i=0;i<audioData.length;i++){view.setInt16(offset,audioData[i],true);offset+=2;}return new Blob([buffer],{type:'audio/wav'});}async clearAllData(){// Clear preferences\nawait Preferences.clear();// Clear filesystem data\ntry{await Filesystem.rmdir({path:'audio_logs',directory:Directory.Documents,recursive:true});await Filesystem.rmdir({path:'recordings',directory:Directory.Documents,recursive:true});}catch(error){console.log('Some directories may not exist:',error);}}}// Export singleton instance\nexport const bleAudioDataManager=new BleAudioDataManager();","map":{"version":3,"names":["Preferences","Filesystem","Directory","Encoding","Capacitor","BleAudioDataManager","constructor","DEVICE_SETTINGS_PREFIX","KNOWN_DEVICES_KEY","RECORDING_SESSIONS_KEY","saveDeviceSettings","deviceId","settings","set","key","concat","value","JSON","stringify","_objectSpread","lastUpdated","Date","toISOString","getDeviceSettings","get","parse","addKnownDevice","deviceInfo","knownDevices","existingIndex","findIndex","d","id","deviceData","lastSeen","push","getKnownDevices","startRecordingSession","sessionInfo","arguments","length","undefined","sessionId","now","session","startTime","status","sessions","logFile","header","writeFile","path","data","directory","Documents","encoding","UTF8","recursive","logAudioData","audioData","metadata","timestamp","samples","Array","from","audioInfo","sampleCount","slice","range","min","Math","max","logEntry","appendFile","error","console","saveAudioRecording","replace","fileName","log","isValid","validateAudioData","warn","actualDuration","duration","actualSampleRate","calculateActualSampleRate","toLocaleString","toFixed","wavBlob","createWavBlob","arrayBuffer","base64Data","btoa","String","fromCharCode","Uint8Array","recording","sampleRate","playbackDuration","fileSize","size","audioQuality","dynamicRange","metadataFile","updateSessionStatus","sessionIndex","s","endTime","getRecordingSessions","filter","listRecordings","result","readdir","files","file","name","endsWith","getRecording","readFile","playRecording","binaryString","atob","bytes","i","charCodeAt","Blob","type","exportRecording","isNativePlatform","blob","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","cleanupOldData","daysToKeep","cutoffDate","setDate","getDate","recentSessions","recordings","stat","mtime","getTime","deleteFile","calculatedRate","abs","round","mean","reduce","b","rms","sqrt","CHANNELS","SAMPLE_WIDTH","buffer","ArrayBuffer","view","DataView","writeString","offset","string","setUint8","setUint32","setUint16","setInt16","clearAllData","clear","rmdir","bleAudioDataManager"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/src/utils/BleAudioDataManager.js"],"sourcesContent":["import { Preferences } from '@capacitor/preferences';\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\nimport { Capacitor } from '@capacitor/core';\n\nexport class BleAudioDataManager {\n  constructor() {\n    this.DEVICE_SETTINGS_PREFIX = 'ble_device_';\n    this.KNOWN_DEVICES_KEY = 'ble_known_devices';\n    this.RECORDING_SESSIONS_KEY = 'recording_sessions';\n  }\n  \n  // Device Management with Preferences\n  async saveDeviceSettings(deviceId, settings) {\n    await Preferences.set({\n      key: `${this.DEVICE_SETTINGS_PREFIX}${deviceId}`,\n      value: JSON.stringify({\n        ...settings,\n        lastUpdated: new Date().toISOString()\n      })\n    });\n  }\n  \n  async getDeviceSettings(deviceId) {\n    const { value } = await Preferences.get({\n      key: `${this.DEVICE_SETTINGS_PREFIX}${deviceId}`\n    });\n    return value ? JSON.parse(value) : null;\n  }\n  \n  async addKnownDevice(deviceId, deviceInfo) {\n    // Save to known devices list\n    const { value } = await Preferences.get({ key: this.KNOWN_DEVICES_KEY });\n    const knownDevices = value ? JSON.parse(value) : [];\n    \n    const existingIndex = knownDevices.findIndex((d) => d.id === deviceId);\n    const deviceData = {\n      id: deviceId,\n      ...deviceInfo,\n      lastSeen: new Date().toISOString()\n    };\n    \n    if (existingIndex >= 0) {\n      knownDevices[existingIndex] = deviceData;\n    } else {\n      knownDevices.push(deviceData);\n    }\n    \n    await Preferences.set({\n      key: this.KNOWN_DEVICES_KEY,\n      value: JSON.stringify(knownDevices)\n    });\n  }\n  \n  async getKnownDevices() {\n    const { value } = await Preferences.get({ key: this.KNOWN_DEVICES_KEY });\n    return value ? JSON.parse(value) : [];\n  }\n  \n  // Audio Recording Session Management\n  async startRecordingSession(deviceId, sessionInfo = {}) {\n    const sessionId = `session_${deviceId}_${Date.now()}`;\n    const session = {\n      id: sessionId,\n      deviceId,\n      startTime: new Date().toISOString(),\n      status: 'recording',\n      ...sessionInfo\n    };\n    \n    // Save session info to preferences\n    const { value } = await Preferences.get({ key: this.RECORDING_SESSIONS_KEY });\n    const sessions = value ? JSON.parse(value) : [];\n    sessions.push(session);\n    await Preferences.set({\n      key: this.RECORDING_SESSIONS_KEY,\n      value: JSON.stringify(sessions)\n    });\n    \n    // Create log file for real-time data\n    const logFile = `audio_stream_${sessionId}.log`;\n    const header = `# Audio Stream Log for ${deviceId}\\n# Session: ${sessionId}\\n# Started: ${session.startTime}\\n\\n`;\n    \n    await Filesystem.writeFile({\n      path: `audio_logs/${logFile}`,\n      data: header,\n      directory: Directory.Documents,\n      encoding: Encoding.UTF8,\n      recursive: true\n    });\n    \n    return { sessionId, logFile };\n  }\n  \n  async logAudioData(sessionId, audioData, metadata = {}) {\n    const logFile = `audio_stream_${sessionId}.log`;\n    const timestamp = new Date().toISOString();\n    \n    // Convert Int16Array to readable format\n    const samples = Array.from(audioData);\n    const audioInfo = {\n      timestamp,\n      sessionId,\n      sampleCount: audioData.length,\n      samples: samples.slice(0, 10), // First 10 samples for debugging\n      range: {\n        min: Math.min(...samples),\n        max: Math.max(...samples)\n      },\n      ...metadata\n    };\n    \n    const logEntry = `${timestamp} | ${JSON.stringify(audioInfo)}\\n`;\n    \n    try {\n      await Filesystem.appendFile({\n        path: `audio_logs/${logFile}`,\n        data: logEntry,\n        directory: Directory.Documents,\n        encoding: Encoding.UTF8\n      });\n    } catch (error) {\n      console.error('Error logging audio data:', error);\n    }\n  }\n  \n  async saveAudioRecording(sessionId, audioData, metadata = {}) {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = `recording_${sessionId}_${timestamp}.wav`;\n    \n    // Validate audio data (like Python)\n    console.log(`🔍 Validating audio data: ${audioData.length} samples`);\n    const isValid = this.validateAudioData(audioData);\n    if (!isValid) {\n      console.warn('⚠️ Audio data validation failed, but continuing...');\n    }\n    \n    // Calculate actual duration and sample rate (like Python)\n    const actualDuration = metadata.duration || (audioData.length / 16000);\n    const actualSampleRate = this.calculateActualSampleRate(audioData, actualDuration);\n    \n    console.log(`📊 Audio Analysis:`);\n    console.log(`   Samples: ${audioData.length.toLocaleString()}`);\n    console.log(`   Duration: ${actualDuration.toFixed(2)}s`);\n    console.log(`   Sample Rate: ${actualSampleRate} Hz`);\n    console.log(`   Playback Duration: ${(audioData.length / actualSampleRate).toFixed(2)}s`);\n    \n    // Create WAV file from audio data with dynamic sample rate\n    const wavBlob = this.createWavBlob(audioData, actualDuration);\n    \n    // Convert blob to base64 for storage\n    const arrayBuffer = await wavBlob.arrayBuffer();\n    const base64Data = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n    \n    const recording = {\n      sessionId,\n      fileName,\n      timestamp: new Date().toISOString(),\n      sampleCount: audioData.length,\n      duration: actualDuration,\n      sampleRate: actualSampleRate,\n      playbackDuration: audioData.length / actualSampleRate,\n      fileSize: wavBlob.size,\n      audioQuality: {\n        isValid,\n        min: Math.min(...Array.from(audioData)),\n        max: Math.max(...Array.from(audioData)),\n        dynamicRange: Math.max(...Array.from(audioData)) - Math.min(...Array.from(audioData))\n      },\n      ...metadata\n    };\n    \n    // Save audio file\n    await Filesystem.writeFile({\n      path: `recordings/${fileName}`,\n      data: base64Data,\n      directory: Directory.Documents,\n      recursive: true\n    });\n    \n    // Save recording metadata\n    const metadataFile = `recording_${sessionId}_${timestamp}.json`;\n    await Filesystem.writeFile({\n      path: `recordings/${metadataFile}`,\n      data: JSON.stringify(recording, null, 2),\n      directory: Directory.Documents,\n      encoding: Encoding.UTF8,\n      recursive: true\n    });\n    \n    // Update session status\n    await this.updateSessionStatus(sessionId, 'completed', recording);\n    \n    return { fileName, metadataFile, recording };\n  }\n  \n  async updateSessionStatus(sessionId, status, data = {}) {\n    const { value } = await Preferences.get({ key: this.RECORDING_SESSIONS_KEY });\n    const sessions = value ? JSON.parse(value) : [];\n    \n    const sessionIndex = sessions.findIndex(s => s.id === sessionId);\n    if (sessionIndex >= 0) {\n      sessions[sessionIndex] = {\n        ...sessions[sessionIndex],\n        status,\n        endTime: new Date().toISOString(),\n        ...data\n      };\n      \n      await Preferences.set({\n        key: this.RECORDING_SESSIONS_KEY,\n        value: JSON.stringify(sessions)\n      });\n    }\n  }\n  \n  async getRecordingSessions(deviceId = null) {\n    const { value } = await Preferences.get({ key: this.RECORDING_SESSIONS_KEY });\n    const sessions = value ? JSON.parse(value) : [];\n    \n    return deviceId ? sessions.filter(s => s.deviceId === deviceId) : sessions;\n  }\n  \n  async listRecordings() {\n    try {\n      const result = await Filesystem.readdir({\n        path: 'recordings',\n        directory: Directory.Documents\n      });\n      \n      return result.files.filter(file => \n        file.name.endsWith('.wav') || file.name.endsWith('.json')\n      );\n    } catch (error) {\n      console.error('Error listing recordings:', error);\n      return [];\n    }\n  }\n  \n  async getRecording(metadataFile) {\n    try {\n      const result = await Filesystem.readFile({\n        path: `recordings/${metadataFile}`,\n        directory: Directory.Documents,\n        encoding: Encoding.UTF8\n      });\n      \n      return JSON.parse(result.data);\n    } catch (error) {\n      console.error('Error reading recording metadata:', error);\n      return null;\n    }\n  }\n  \n  async playRecording(fileName) {\n    try {\n      const result = await Filesystem.readFile({\n        path: `recordings/${fileName}`,\n        directory: Directory.Documents\n      });\n      \n      // Convert base64 back to blob\n      const binaryString = atob(result.data);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      \n      return new Blob([bytes], { type: 'audio/wav' });\n    } catch (error) {\n      console.error('Error reading recording file:', error);\n      return null;\n    }\n  }\n  \n  async exportRecording(fileName) {\n    if (Capacitor.isNativePlatform()) {\n      // On iOS/Android, file is already in Documents directory\n      // User can access it through Files app\n      return fileName;\n    } else {\n      // On web, trigger download\n      const blob = await this.playRecording(fileName);\n      if (blob) {\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }\n      return fileName;\n    }\n  }\n  \n  async cleanupOldData(daysToKeep = 7) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n    \n    // Clean up old sessions\n    const sessions = await this.getRecordingSessions();\n    const recentSessions = sessions.filter(s => \n      new Date(s.startTime) > cutoffDate\n    );\n    \n    await Preferences.set({\n      key: this.RECORDING_SESSIONS_KEY,\n      value: JSON.stringify(recentSessions)\n    });\n    \n    // Clean up old files\n    try {\n      const recordings = await this.listRecordings();\n      for (const file of recordings) {\n        const stat = await Filesystem.stat({\n          path: `recordings/${file.name}`,\n          directory: Directory.Documents\n        });\n        \n        if (stat.mtime < cutoffDate.getTime()) {\n          await Filesystem.deleteFile({\n            path: `recordings/${file.name}`,\n            directory: Directory.Documents\n          });\n          console.log(`Deleted old recording: ${file.name}`);\n        }\n      }\n    } catch (error) {\n      console.error('Error cleaning up old data:', error);\n    }\n  }\n  \n  // Helper method to calculate actual sample rate (like Python)\n  calculateActualSampleRate(audioData, duration) {\n    const calculatedRate = audioData.length / duration;\n    if (Math.abs(calculatedRate - 16000) / 16000 < 0.1) {\n      return 16000;\n    }\n    return Math.round(calculatedRate);\n  }\n\n  // Helper method to validate audio data (like Python)\n  validateAudioData(audioData) {\n    const samples = Array.from(audioData);\n    const min = Math.min(...samples);\n    const max = Math.max(...samples);\n    const mean = samples.reduce((a, b) => a + b, 0) / samples.length;\n    const rms = Math.sqrt(samples.reduce((a, b) => a + b * b, 0) / samples.length);\n    \n    console.log(`🎵 Audio Quality Analysis:`);\n    console.log(`   Min: ${min}, Max: ${max}`);\n    console.log(`   Mean: ${mean.toFixed(1)}, RMS: ${rms.toFixed(1)}`);\n    console.log(`   Dynamic range: ${max - min}`);\n    \n    // Check for silence or clipping (like Python)\n    if (max - min < 100) {\n      console.warn('⚠️ Audio appears to be silent or very quiet');\n      return false;\n    }\n    if (Math.abs(max) > 30000 || Math.abs(min) > 30000) {\n      console.warn('⚠️ Audio appears to be clipping');\n      return false;\n    }\n    \n    return true;\n  }\n\n  // Helper method to create WAV blob with dynamic sample rate\n  createWavBlob(audioData, actualDuration = null) {\n    const CHANNELS = 1;\n    const SAMPLE_WIDTH = 2;\n    \n    // Calculate actual sample rate like Python\n    let sampleRate = 16000; // Default\n    if (actualDuration) {\n      sampleRate = this.calculateActualSampleRate(audioData, actualDuration);\n      console.log(`📊 Using calculated sample rate: ${sampleRate} Hz (duration: ${actualDuration}s)`);\n    } else {\n      console.log(`📊 Using default sample rate: ${sampleRate} Hz`);\n    }\n    \n    const buffer = new ArrayBuffer(44 + audioData.length * 2);\n    const view = new DataView(buffer);\n    \n    // WAV header\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + audioData.length * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, CHANNELS, true);\n    view.setUint32(24, sampleRate, true);  // Use calculated sample rate\n    view.setUint32(28, sampleRate * CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(32, CHANNELS * SAMPLE_WIDTH, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, audioData.length * 2, true);\n    \n    // Write audio data\n    let offset = 44;\n    for (let i = 0; i < audioData.length; i++) {\n      view.setInt16(offset, audioData[i], true);\n      offset += 2;\n    }\n    \n    return new Blob([buffer], { type: 'audio/wav' });\n  }\n  \n  async clearAllData() {\n    // Clear preferences\n    await Preferences.clear();\n    \n    // Clear filesystem data\n    try {\n      await Filesystem.rmdir({\n        path: 'audio_logs',\n        directory: Directory.Documents,\n        recursive: true\n      });\n      await Filesystem.rmdir({\n        path: 'recordings',\n        directory: Directory.Documents,\n        recursive: true\n      });\n    } catch (error) {\n      console.log('Some directories may not exist:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const bleAudioDataManager = new BleAudioDataManager();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}