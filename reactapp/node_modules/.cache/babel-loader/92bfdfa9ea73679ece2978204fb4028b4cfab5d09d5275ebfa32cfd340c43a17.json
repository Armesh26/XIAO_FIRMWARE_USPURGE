{"ast":null,"code":"import { chunkArray } from \"../lib/helpers\";\nconst wordMap = word => {\n  return {\n    word: word.text,\n    start: word.start,\n    end: word.end,\n    confidence: word.confidence,\n    punctuated_word: word.text,\n    speaker: word.speaker\n  };\n};\nexport class AssemblyAiConverter {\n  constructor(transcriptionData) {\n    this.transcriptionData = transcriptionData;\n  }\n  getLines() {\n    let lineLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    const results = this.transcriptionData;\n    let content = [];\n    if (results.utterances) {\n      results.utterances.forEach(utterance => {\n        if (utterance.words.length > lineLength) {\n          content.push(...chunkArray(utterance.words.map(w => wordMap(w)), lineLength));\n        } else {\n          content.push(utterance.words.map(w => wordMap(w)));\n        }\n      });\n    } else {\n      content.push(...chunkArray(results.words.map(w => wordMap(w)), lineLength));\n    }\n    return content;\n  }\n  getHeaders() {\n    const output = [];\n    output.push(\"NOTE\");\n    output.push(\"Transcription provided by Assembly AI\");\n    this.transcriptionData.id ? output.push(\"Id: \".concat(this.transcriptionData.id)) : null;\n    this.transcriptionData.audio_duration ? output.push(\"Duration: \".concat(this.transcriptionData.audio_duration)) : null;\n    return output;\n  }\n}","map":{"version":3,"names":["chunkArray","wordMap","word","text","start","end","confidence","punctuated_word","speaker","AssemblyAiConverter","constructor","transcriptionData","getLines","lineLength","arguments","length","undefined","results","content","utterances","forEach","utterance","words","push","map","w","getHeaders","output","id","concat","audio_duration"],"sources":["/Users/armeshpereira/Documents/LastAttempt/reactapp/node_modules/@deepgram/captions/src/converters/AssemblyAiConverter.ts"],"sourcesContent":["import { chunkArray } from \"../lib/helpers\";\nimport { WordBase } from \"../lib/types\";\nimport { IConverter } from \"./IConverter\";\n\nconst wordMap = (word: any): WordBase => {\n  return {\n    word: word.text,\n    start: word.start,\n    end: word.end,\n    confidence: word.confidence,\n    punctuated_word: word.text,\n    speaker: word.speaker,\n  };\n};\n\nexport class AssemblyAiConverter implements IConverter {\n  constructor(public transcriptionData: any) {}\n\n  getLines(lineLength: number = 8): WordBase[][] {\n    const results = this.transcriptionData;\n    let content: WordBase[][] = [];\n\n    if (results.utterances) {\n      results.utterances.forEach((utterance: any) => {\n        if (utterance.words.length > lineLength) {\n          content.push(\n            ...chunkArray(\n              utterance.words.map((w: any) => wordMap(w)),\n              lineLength\n            )\n          );\n        } else {\n          content.push(utterance.words.map((w: any) => wordMap(w)));\n        }\n      });\n    } else {\n      content.push(\n        ...chunkArray(\n          results.words.map((w: any) => wordMap(w)),\n          lineLength\n        )\n      );\n    }\n\n    return content;\n  }\n\n  getHeaders(): string[] {\n    const output: string[] = [];\n\n    output.push(\"NOTE\");\n    output.push(\"Transcription provided by Assembly AI\");\n    this.transcriptionData.id ? output.push(`Id: ${this.transcriptionData.id}`) : null;\n    this.transcriptionData.audio_duration\n      ? output.push(`Duration: ${this.transcriptionData.audio_duration}`)\n      : null;\n\n    return output;\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAI3C,MAAMC,OAAO,GAAIC,IAAS,IAAc;EACtC,OAAO;IACLA,IAAI,EAAEA,IAAI,CAACC,IAAI;IACfC,KAAK,EAAEF,IAAI,CAACE,KAAK;IACjBC,GAAG,EAAEH,IAAI,CAACG,GAAG;IACbC,UAAU,EAAEJ,IAAI,CAACI,UAAU;IAC3BC,eAAe,EAAEL,IAAI,CAACC,IAAI;IAC1BK,OAAO,EAAEN,IAAI,CAACM;GACf;AACH,CAAC;AAED,OAAM,MAAOC,mBAAmB;EAC9BC,YAAmBC,iBAAsB;IAAtB,KAAAA,iBAAiB,GAAjBA,iBAAiB;EAAQ;EAE5CC,QAAQA,CAAA,EAAuB;IAAA,IAAtBC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqB,CAAC;IAC7B,MAAMG,OAAO,GAAG,IAAI,CAACN,iBAAiB;IACtC,IAAIO,OAAO,GAAiB,EAAE;IAE9B,IAAID,OAAO,CAACE,UAAU,EAAE;MACtBF,OAAO,CAACE,UAAU,CAACC,OAAO,CAAEC,SAAc,IAAI;QAC5C,IAAIA,SAAS,CAACC,KAAK,CAACP,MAAM,GAAGF,UAAU,EAAE;UACvCK,OAAO,CAACK,IAAI,CACV,GAAGvB,UAAU,CACXqB,SAAS,CAACC,KAAK,CAACE,GAAG,CAAEC,CAAM,IAAKxB,OAAO,CAACwB,CAAC,CAAC,CAAC,EAC3CZ,UAAU,CACX,CACF;SACF,MAAM;UACLK,OAAO,CAACK,IAAI,CAACF,SAAS,CAACC,KAAK,CAACE,GAAG,CAAEC,CAAM,IAAKxB,OAAO,CAACwB,CAAC,CAAC,CAAC,CAAC;;MAE7D,CAAC,CAAC;KACH,MAAM;MACLP,OAAO,CAACK,IAAI,CACV,GAAGvB,UAAU,CACXiB,OAAO,CAACK,KAAK,CAACE,GAAG,CAAEC,CAAM,IAAKxB,OAAO,CAACwB,CAAC,CAAC,CAAC,EACzCZ,UAAU,CACX,CACF;;IAGH,OAAOK,OAAO;EAChB;EAEAQ,UAAUA,CAAA;IACR,MAAMC,MAAM,GAAa,EAAE;IAE3BA,MAAM,CAACJ,IAAI,CAAC,MAAM,CAAC;IACnBI,MAAM,CAACJ,IAAI,CAAC,uCAAuC,CAAC;IACpD,IAAI,CAACZ,iBAAiB,CAACiB,EAAE,GAAGD,MAAM,CAACJ,IAAI,QAAAM,MAAA,CAAQ,IAAI,CAAClB,iBAAiB,CAACiB,EAAE,CAAE,CAAC,GAAG,IAAI;IAClF,IAAI,CAACjB,iBAAiB,CAACmB,cAAc,GACjCH,MAAM,CAACJ,IAAI,cAAAM,MAAA,CAAc,IAAI,CAAClB,iBAAiB,CAACmB,cAAc,CAAE,CAAC,GACjE,IAAI;IAER,OAAOH,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}